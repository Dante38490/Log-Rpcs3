HLE: ! path: /dev_hdd0/game/
HLE: W No pause.bin found, Auto Pause will not work.
HLE: W No pause.bin found, Auto Pause will not work.
LDR: ! Loading 'D:\Emulateurs\Rpcs3\dev_hdd0\game\BLES00861-[Last Rebellion]/PS3_GAME/USRDIR/BOOT.BIN'...
LDR: !  
LDR: ! Mount info:
LDR: ! /dev_hdd0/ -> ./dev_hdd0/
LDR: ! /dev_hdd1/ -> ./dev_hdd1/
LDR: ! /dev_flash/ -> ./dev_flash/
LDR: ! /dev_usb000/ -> ./dev_usb000/
LDR: ! /dev_usb/ -> ./dev_usb000/
LDR: ! /app_home/ -> D:\Emulateurs\Rpcs3\dev_hdd0\game\BLES00861-[Last Rebellion]/PS3_GAME/
LDR: ! /dev_bdvd/ -> D:\Emulateurs\Rpcs3\dev_hdd0\game\BLES00861-[Last Rebellion]/PS3_GAME//../
LDR: ! /host_root/ -> 
LDR: ! /app_home/PS3_GAME/USRDIR/ -> D:\Emulateurs\Rpcs3\dev_hdd0\game\BLES00861-[Last Rebellion]/PS3_GAME//USRDIR/
LDR: ! /dev_flash2/ -> ./dev_flash2/
LDR: ! /app_home/Game/PS3_GAME/USRDIR/ -> D:\Emulateurs\Rpcs3\dev_hdd0\game\BLES00861-[Last Rebellion]/PS3_GAME//USRDIR/
LDR: ! //dev_hdd0/ -> ./dev_hdd0/
LDR: ! / -> D:\Emulateurs\Rpcs3\dev_hdd0\game\BLES00861-[Last Rebellion]/PS3_GAME//USRDIR/
LDR: ! /app_home//dev_bdvd/PS3_GAME/USRDIR/data/gos/ -> D:\Emulateurs\Rpcs3\dev_hdd0\game\BLES00861-[Last Rebellion]/PS3_GAME//USRDIR/
LDR: !  
LDR: ! Title: Last Rebellion
LDR: ! Serial: BLES00861
LDR: !  
MEM: ! Initializing memory: m_base_addr = 0xadc3b20000
MEM: ! Memory initialized.
LDR: ! Imported function 'cellPadInit' in 'sys_io' module
LDR: ! Imported function 'cellPadEnd' in 'sys_io' module
LDR: ! Imported function 'cellPadGetData' in 'sys_io' module
LDR: ! Imported function 'cellPadGetInfo2' in 'sys_io' module
LDR: ! Imported function 'cellGcmGetTiledPitchSize' in 'cellGcmSys' module
LDR: ! Imported function '_cellGcmInitBody' in 'cellGcmSys' module
LDR: ! Imported function 'cellGcmAddressToOffset' in 'cellGcmSys' module
LDR: ! Imported function '_cellGcmFunc15' in 'cellGcmSys' module
LDR: ! Imported function 'cellGcmGetDefaultCommandWordSize' in 'cellGcmSys' module
LDR: ! Imported function 'cellGcmGetLastFlipTime' in 'cellGcmSys' module
LDR: ! Imported function 'cellGcmGetDefaultSegmentWordSize' in 'cellGcmSys' module
LDR: ! Imported function 'cellGcmSetDefaultFifoSize' in 'cellGcmSys' module
LDR: ! Imported function 'cellGcmBindZcull' in 'cellGcmSys' module
LDR: ! Imported function 'cellGcmGetControlRegister' in 'cellGcmSys' module
LDR: ! Imported function 'cellGcmSetTile' in 'cellGcmSys' module
LDR: ! Imported function 'cellGcmGetConfiguration' in 'cellGcmSys' module
LDR: ! Imported function 'cellGcmGetLabelAddress' in 'cellGcmSys' module
LDR: ! Imported function 'cellSysmoduleUnloadModule' in 'cellSysmodule' module
LDR: ! Imported function 'cellSysmoduleLoadModule' in 'cellSysmodule' module
LDR: ! Imported function 'cellSysmoduleIsLoaded' in 'cellSysmodule' module
LDR: ! Imported function 'cellSysutilCheckCallback' in 'cellSysutil' module
LDR: ! Imported function 'cellSaveDataListLoad2' in 'cellSysutil' module
LDR: ! Imported function 'cellSaveDataListAutoLoad' in 'cellSysutil' module
LDR: ! Imported function 'cellSaveDataListSave2' in 'cellSysutil' module
LDR: ! Imported function 'cellSysutilGetSystemParamInt' in 'cellSysutil' module
LDR: ! Imported function 'cellAudioOutConfigure' in 'cellSysutil' module
LDR: ! Imported function 'cellVideoOutGetState' in 'cellSysutil' module
LDR: ! Imported function 'cellSysutilRegisterCallback' in 'cellSysutil' module
LDR: ! Imported function 'cellAudioOutGetSoundAvailability' in 'cellSysutil' module
LDR: ! Imported function 'cellAudioOutSetCopyControl' in 'cellSysutil' module
LDR: ! Imported function 'cellAudioOutGetNumberOfDevice' in 'cellSysutil' module
LDR: W Unimplemented function 'cellSaveDataDelete2' in 'cellSysutil' module
LDR: ! Imported function 'cellAudioOutGetState' in 'cellSysutil' module
LDR: ! Imported function 'cellAudioOutGetDeviceInfo' in 'cellSysutil' module
LDR: ! Imported function 'cellAudioOutGetConfiguration' in 'cellSysutil' module
LDR: ! Imported function 'cellGameContentPermit' in 'cellGame' module
LDR: ! Imported function 'cellGameContentErrorDialog' in 'cellGame' module
LDR: ! Imported function 'cellGameBootCheck' in 'cellGame' module
LDR: ! Imported function 'cellRescGcmSurface2RescSrc' in 'cellResc' module
LDR: ! Imported function 'cellRescSetWaitFlip' in 'cellResc' module
LDR: ! Imported function 'cellRescSetDsts' in 'cellResc' module
LDR: ! Imported function 'cellRescSetDisplayMode' in 'cellResc' module
LDR: ! Imported function 'cellRescSetConvertAndFlip' in 'cellResc' module
LDR: ! Imported function 'cellRescExit' in 'cellResc' module
LDR: ! Imported function 'cellRescSetFlipHandler' in 'cellResc' module
LDR: ! Imported function 'cellRescInit' in 'cellResc' module
LDR: ! Imported function 'cellRescGetBufferSize' in 'cellResc' module
LDR: ! Imported function 'cellRescSetSrc' in 'cellResc' module
LDR: ! Imported function 'cellRescSetBufferAddress' in 'cellResc' module
LDR: ! Imported function 'cellRescVideoOutResolutionId2RescBufferMode' in 'cellResc' module
LDR: ! Imported function 'cellRescSetVBlankHandler' in 'cellResc' module
LDR: ! Imported function 'cellFsStReadGetCurrentAddr' in 'sys_fs' module
LDR: ! Imported function 'cellFsStReadInit' in 'sys_fs' module
LDR: ! Imported function 'cellFsClose' in 'sys_fs' module
LDR: ! Imported function 'cellFsRead' in 'sys_fs' module
LDR: ! Imported function 'cellFsOpen' in 'sys_fs' module
LDR: ! Imported function 'cellFsStat' in 'sys_fs' module
LDR: ! Imported function 'cellFsStReadPutCurrentAddr' in 'sys_fs' module
LDR: ! Imported function 'cellFsStReadStart' in 'sys_fs' module
LDR: ! Imported function 'cellFsStReadWait' in 'sys_fs' module
LDR: ! Imported function 'cellFsLseek' in 'sys_fs' module
LDR: ! Imported function 'cellFsSdataOpen' in 'sys_fs' module
LDR: ! Imported function 'cellFsStReadGetStatus' in 'sys_fs' module
LDR: ! Imported function 'cellFsStReadFinish' in 'sys_fs' module
LDR: ! Imported function 'cellFsFstat' in 'sys_fs' module
LDR: ! Imported function 'cellFsStReadStop' in 'sys_fs' module
LDR: ! Imported function 'cellAudioInit' in 'cellAudio' module
LDR: ! Imported function 'cellAudioGetPortTimestamp' in 'cellAudio' module
LDR: ! Imported function 'cellAudioPortClose' in 'cellAudio' module
LDR: ! Imported function 'cellAudioSetPortLevel' in 'cellAudio' module
LDR: ! Imported function 'cellAudioPortStop' in 'cellAudio' module
LDR: ! Imported function 'cellAudioGetPortConfig' in 'cellAudio' module
LDR: W Unimplemented function 'cellAudioAdd6chData' in 'cellAudio' module
LDR: ! Imported function 'cellAudioPortStart' in 'cellAudio' module
LDR: ! Imported function 'cellAudioAdd2chData' in 'cellAudio' module
LDR: ! Imported function 'cellAudioQuit' in 'cellAudio' module
LDR: ! Imported function 'cellAudioPortOpen' in 'cellAudio' module
LDR: ! Imported function 'cellAudioAddData' in 'cellAudio' module
LDR: ! Imported function 'cellAudioGetPortBlockTag' in 'cellAudio' module
LDR: ! Imported function 'cellAudioSetNotifyEventQueue' in 'cellAudio' module
LDR: ! Imported function 'cellAudioRemoveNotifyEventQueue' in 'cellAudio' module
LDR: ! Imported function 'cellSailGraphicsAdapterGetFrame' in 'cellSail' module
LDR: ! Imported function 'cellSailPlayerCloseEsVideo' in 'cellSail' module
LDR: ! Imported function 'cellSailDescriptorCreateDatabase' in 'cellSail' module
LDR: ! Imported function 'cellSailPlayerSetSoundAdapter' in 'cellSail' module
LDR: ! Imported function 'cellSailGraphicsAdapterPtsToTimePosition' in 'cellSail' module
LDR: ! Imported function 'cellSailPlayerFinalize' in 'cellSail' module
LDR: ! Imported function 'cellSailPlayerSetGraphicsAdapter' in 'cellSail' module
LDR: ! Imported function 'cellSailGraphicsAdapterInitialize' in 'cellSail' module
LDR: ! Imported function 'cellSailPlayerInitialize2' in 'cellSail' module
LDR: ! Imported function 'cellSailGraphicsAdapterSetPreferredFormat' in 'cellSail' module
LDR: ! Imported function 'cellSailMemAllocatorInitialize' in 'cellSail' module
LDR: ! Imported function 'cellSailPlayerOpenStream' in 'cellSail' module
LDR: ! Imported function 'cellSailFutureGet' in 'cellSail' module
LDR: ! Imported function 'cellSailSoundAdapterInitialize' in 'cellSail' module
LDR: ! Imported function 'cellSailGraphicsAdapterUpdateAvSync' in 'cellSail' module
LDR: ! Imported function 'cellSailPlayerReplaceEventHandler' in 'cellSail' module
LDR: ! Imported function 'cellSailSoundAdapterPtsToTimePosition' in 'cellSail' module
LDR: ! Imported function 'cellSailFutureInitialize' in 'cellSail' module
LDR: ! Imported function 'cellSailMp4MovieGetMovieInfo' in 'cellSail' module
LDR: ! Imported function 'cellSailAviMovieGetMovieInfo' in 'cellSail' module
LDR: ! Imported function 'cellSailGraphicsAdapterFinalize' in 'cellSail' module
LDR: ! Imported function 'cellSailPlayerAddDescriptor' in 'cellSail' module
LDR: ! Imported function 'cellSailSoundAdapterGetFrame' in 'cellSail' module
LDR: ! Imported function 'cellSailPlayerCloseStream' in 'cellSail' module
LDR: ! Imported function 'cellSailFutureFinalize' in 'cellSail' module
LDR: ! Imported function 'cellSailFutureSet' in 'cellSail' module
LDR: ! Imported function 'cellSailPlayerBoot' in 'cellSail' module
LDR: ! Imported function 'cellSailPlayerCloseEsAudio' in 'cellSail' module
LDR: ! Imported function 'cellSailDescriptorGetStreamType' in 'cellSail' module
LDR: ! Imported function 'cellSailPlayerCreateDescriptor' in 'cellSail' module
LDR: ! Imported function 'cellSailPlayerStart' in 'cellSail' module
LDR: ! Imported function 'cellSailPlayerStop' in 'cellSail' module
LDR: ! Imported function 'cellSailSoundAdapterUpdateAvSync' in 'cellSail' module
LDR: ! Imported function 'cellSailSoundAdapterGetFormat' in 'cellSail' module
LDR: ! Imported function 'cellSailGraphicsAdapterGetFormat' in 'cellSail' module
LDR: ! Imported function 'cellSpursAttributeSetNamePrefix' in 'cellSpurs' module
LDR: ! Imported function 'cellSpursAttributeEnableSpuPrintfIfAvailable' in 'cellSpurs' module
LDR: ! Imported function 'cellSpursEventFlagDetachLv2EventQueue' in 'cellSpurs' module
LDR: ! Imported function 'cellSpursCreateJobChainWithAttribute' in 'cellSpurs' module
LDR: ! Imported function '_cellSpursJobChainAttributeInitialize' in 'cellSpurs' module
LDR: ! Imported function 'cellSpursEventFlagClear' in 'cellSpurs' module
LDR: ! Imported function '_cellSpursEventFlagInitialize' in 'cellSpurs' module
LDR: ! Imported function 'cellSpursJobGuardInitialize' in 'cellSpurs' module
LDR: ! Imported function 'cellSpursEventFlagTryWait' in 'cellSpurs' module
LDR: ! Imported function 'cellSpursShutdownJobChain' in 'cellSpurs' module
LDR: ! Imported function 'cellSpursAttributeSetMemoryContainerForSpuThread' in 'cellSpurs' module
LDR: ! Imported function 'cellSpursEventFlagAttachLv2EventQueue' in 'cellSpurs' module
LDR: ! Imported function '_cellSpursAttributeInitialize' in 'cellSpurs' module
LDR: ! Imported function 'cellSpursJobChainAttributeSetName' in 'cellSpurs' module
LDR: ! Imported function 'cellSpursJoinJobChain' in 'cellSpurs' module
LDR: ! Imported function 'cellSpursInitializeWithAttribute' in 'cellSpurs' module
LDR: ! Imported function 'cellSpursFinalize' in 'cellSpurs' module
LDR: ! Imported function 'cellSpursJobGuardNotify' in 'cellSpurs' module
LDR: ! Imported function 'cellSpursRunJobChain' in 'cellSpurs' module
LDR: ! Imported function 'cellSpursEventFlagWait' in 'cellSpurs' module
LDR: ! Imported function 'cellSpursDetachLv2EventQueue' in 'cellSpurs' module
LDR: ! Imported function 'cellSpursCreateTaskset' in 'cellSpurs' module
LDR: ! Imported function 'cellSpursJoinTaskset' in 'cellSpurs' module
LDR: ! Imported function 'cellSpursShutdownTaskset' in 'cellSpurs' module
LDR: ! Imported function 'cellSpursAttachLv2EventQueue' in 'cellSpurs' module
LDR: ! Imported function 'cellSpursCreateTask' in 'cellSpurs' module
LDR: ! Imported function '_cellSpursSendSignal' in 'cellSpurs' module
LDR: ! Imported function 'cellPamfReaderGetPresentationStartTime' in 'cellPamf' module
LDR: ! Imported function 'cellPamfReaderGetPresentationEndTime' in 'cellPamf' module
LDR: W Unimplemented function 'l10n_convert_str' in 'cellL10n' module
LDR: W Unimplemented function 'l10n_get_converter' in 'cellL10n' module
LDR: ! Imported function 'sceNpTrophyRegisterContext' in 'sceNpTrophy' module
LDR: ! Imported function 'sceNpTrophyCreateHandle' in 'sceNpTrophy' module
LDR: ! Imported function 'sceNpTrophyGetRequiredDiskSpace' in 'sceNpTrophy' module
LDR: ! Imported function 'sceNpTrophyDestroyContext' in 'sceNpTrophy' module
LDR: ! Imported function 'sceNpTrophyInit' in 'sceNpTrophy' module
LDR: ! Imported function 'sceNpTrophyDestroyHandle' in 'sceNpTrophy' module
LDR: ! Imported function 'sceNpTrophyUnlockTrophy' in 'sceNpTrophy' module
LDR: ! Imported function 'sceNpTrophyTerm' in 'sceNpTrophy' module
LDR: ! Imported function 'sceNpTrophyCreateContext' in 'sceNpTrophy' module
LDR: W Unknown module 'cellSaveData'
LDR: ! Imported function 'cellSaveDataListDelete' in 'cellSaveData' module
LDR: ! Imported function 'sys_lwmutex_lock' in 'sysPrxForUser' module
LDR: ! Imported function 'sys_lwmutex_unlock' in 'sysPrxForUser' module
LDR: ! Imported function 'sys_ppu_thread_create' in 'sysPrxForUser' module
LDR: ! Imported function '_sys_process_atexitspawn' in 'sysPrxForUser' module
LDR: ! Imported function 'sys_lwmutex_create' in 'sysPrxForUser' module
LDR: ! Imported function 'sys_ppu_thread_get_id' in 'sysPrxForUser' module
LDR: ! Imported function '_sys_heap_malloc' in 'sysPrxForUser' module
LDR: ! Imported function 'sys_prx_register_library' in 'sysPrxForUser' module
LDR: ! Imported function '_sys_heap_memalign' in 'sysPrxForUser' module
LDR: ! Imported function 'sys_initialize_tls' in 'sysPrxForUser' module
LDR: ! Imported function 'sys_time_get_system_time' in 'sysPrxForUser' module
LDR: W Unimplemented function '_sys_heap_free' in 'sysPrxForUser' module
LDR: ! Imported function '_sys_process_at_Exitspawn' in 'sysPrxForUser' module
LDR: ! Imported function 'sys_prx_exitspawn_with_level' in 'sysPrxForUser' module
LDR: ! Imported function 'sys_lwmutex_trylock' in 'sysPrxForUser' module
LDR: W Unimplemented function '_sys_heap_delete_heap' in 'sysPrxForUser' module
LDR: ! Imported function 'sys_ppu_thread_exit' in 'sysPrxForUser' module
LDR: ! Imported function '_sys_heap_create_heap' in 'sysPrxForUser' module
LDR: ! Imported function 'sys_lwmutex_destroy' in 'sysPrxForUser' module
LDR: ! Imported function 'sys_spu_image_close' in 'sysPrxForUser' module
LDR: ! Imported function 'sys_process_exit' in 'sysPrxForUser' module
HLE: W {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex warning: sys_lwmutex_create(lwmutex_addr=0x24c9a0, attr_addr=0x1b4028)
HLE: ! {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex : *** lwmutex created [_lc_mtx] (attribute=0x12): sq_id = 3
HLE: W {PPU[1] Thread (CPUThread)[0x001993dc]} sys_memory warning: sys_memory_get_user_memory_size(mem_info_addr=0xd000fc04)
HLE: W {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex warning: sys_lwmutex_create(lwmutex_addr=0x24c7a8, attr_addr=0x1b4028)
HLE: ! {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex : *** lwmutex created [_lc_mtx] (attribute=0x12): sq_id = 4
HLE: W {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex warning: sys_lwmutex_create(lwmutex_addr=0x24bf30, attr_addr=0x1b4028)
HLE: ! {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex : *** lwmutex created [_lc_mtx] (attribute=0x12): sq_id = 5
HLE: W {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex warning: sys_lwmutex_create(lwmutex_addr=0x24bf58, attr_addr=0x1b4028)
HLE: ! {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex : *** lwmutex created [_lc_mtx] (attribute=0x12): sq_id = 6
HLE: W {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex warning: sys_lwmutex_create(lwmutex_addr=0x24bf80, attr_addr=0x1b4028)
HLE: ! {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex : *** lwmutex created [_lc_mtx] (attribute=0x12): sq_id = 7
HLE: W {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex warning: sys_lwmutex_create(lwmutex_addr=0x24be68, attr_addr=0x1b4028)
HLE: ! {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex : *** lwmutex created [_lc_mtx] (attribute=0x12): sq_id = 8
HLE: W {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex warning: sys_lwmutex_create(lwmutex_addr=0x24be90, attr_addr=0x1b4028)
HLE: ! {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex : *** lwmutex created [_lc_mtx] (attribute=0x12): sq_id = 9
HLE: W {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex warning: sys_lwmutex_create(lwmutex_addr=0x24beb8, attr_addr=0x1b4028)
HLE: ! {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex : *** lwmutex created [_lc_mtx] (attribute=0x12): sq_id = 10
HLE: W {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex warning: sys_lwmutex_create(lwmutex_addr=0x24bee0, attr_addr=0x1b4028)
HLE: ! {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex : *** lwmutex created [_lc_mtx] (attribute=0x12): sq_id = 11
HLE: W {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex warning: sys_lwmutex_create(lwmutex_addr=0x24bf08, attr_addr=0x1b4028)
HLE: ! {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex : *** lwmutex created [_lc_mtx] (attribute=0x12): sq_id = 12
HLE: W {PPU[1] Thread (CPUThread)[0x001ea058]} cellSysutil warning: cellSysutilRegisterCallback(slot=0, func_addr=0x1f0bc8, userdata=0x0)
HLE: W {PPU[1] Thread (CPUThread)[0x001e8010]} cellSysmodule warning: cellSysmoduleLoadModule(CELL_SYSMODULE_IO)
HLE: W {PPU[1] Thread (CPUThread)[0x001e8010]} cellSysmodule warning: cellSysmoduleLoadModule(CELL_SYSMODULE_RESC)
HLE: W {PPU[1] Thread (CPUThread)[0x001e8010]} cellSysmodule warning: cellSysmoduleLoadModule(CELL_SYSMODULE_FS)
HLE: W {PPU[1] Thread (CPUThread)[0x001e8010]} cellSysmodule warning: cellSysmoduleLoadModule(CELL_SYSMODULE_SYSUTIL_GAME)
HLE: W {PPU[1] Thread (CPUThread)[0x001e8010]} cellSysmodule warning: cellSysmoduleLoadModule(CELL_SYSMODULE_L10N)
HLE: W {PPU[1] Thread (CPUThread)[0x001e8010]} cellSysmodule warning: cellSysmoduleLoadModule(CELL_SYSMODULE_SYSUTIL_NP_TROPHY)
HLE: W {PPU[1] Thread (CPUThread)[0x001e8010]} cellSysmodule warning: cellSysmoduleLoadModule(CELL_SYSMODULE_SYSUTIL_SAVEDATA)
HLE: W {PPU[1] Thread (CPUThread)[0x001e8010]} cellSysmodule warning: cellSysmoduleLoadModule(CELL_SYSMODULE_SPURS)
HLE: W {PPU[1] Thread (CPUThread)[0x000ba068]} sys_spu warning: sys_spu_initialize(max_usable_spu=6, max_raw_spu=0)
HLE: W {PPU[1] Thread (CPUThread)[0x00298094]} cellSpurs warning: _cellSpursAttributeInitialize(attr_addr=0xd000f7a8, revision=2, sdkVersion=0x300000, nSpus=5, spuPriority=151, ppuPriority=400, exitIfNoWork=1)
HLE: W {PPU[1] Thread (CPUThread)[0x00298004]} cellSpurs warning: cellSpursAttributeSetNamePrefix(attr_addr=0xd000f7a8, prefix_addr=0x1b7a90, size=10)
HLE: W {PPU[1] Thread (CPUThread)[0x00298010]} cellSpurs warning: cellSpursAttributeEnableSpuPrintfIfAvailable(attr_addr=0xd000f7a8)
HLE: W {PPU[1] Thread (CPUThread)[0x000ba230]} sys_memory warning: sys_memory_container_create(cid_addr=0x30202600, yield_size=0x500000)
HLE: W {PPU[1] Thread (CPUThread)[0x000ba230]} sys_memory warning: *** memory_container created(addr=0x30300000): id = 13
HLE: W {PPU[1] Thread (CPUThread)[0x0029807c]} cellSpurs warning: cellSpursAttributeSetMemoryContainerForSpuThread(attr_addr=0xd000f7a8, container=13)
HLE: W {PPU[1] Thread (CPUThread)[0x002980b8]} cellSpurs warning: cellSpursInitializeWithAttribute(spurs_addr=0x30201600, attr_addr=0xd000f7a8)
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 14
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 15
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 16
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 17
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 18
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 19
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 20
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 21
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 22
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 23
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 24
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 25
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 26
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 27
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 28
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 29
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuPrv] (protocol=0x2): id = 30
HLE: E {PPU[1] Thread (CPUThread)[0x002980b8]} sys_spu TODO: Unsupported SPU Thread Group type (0x4)
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_spu : *** SPU Thread Group created [GRP_SPUJOBCellSpursKernelGroup] (num=5, prio=151, type=0x4, container=13): id=31
HLE: E {PPU[1] Thread (CPUThread)[0x002980b8]} sys_spu TODO: Unsupported SPU Thread options (0x2)
HLE: W {PPU[1] Thread (CPUThread)[0x002980b8]} sys_spu warning: *** New SPU Thread [GRP_SPUJOBCellSpursKernel0] (ep=0x0, opt=0x2, a1=0x0, a2=0x0, a3=0x0, a4=0x0): id=32
HLE: E {PPU[1] Thread (CPUThread)[0x002980b8]} sys_spu TODO: Unsupported SPU Thread options (0x2)
HLE: W {PPU[1] Thread (CPUThread)[0x002980b8]} sys_spu warning: *** New SPU Thread [GRP_SPUJOBCellSpursKernel1] (ep=0x0, opt=0x2, a1=0x0, a2=0x0, a3=0x0, a4=0x0): id=33
HLE: E {PPU[1] Thread (CPUThread)[0x002980b8]} sys_spu TODO: Unsupported SPU Thread options (0x2)
HLE: W {PPU[1] Thread (CPUThread)[0x002980b8]} sys_spu warning: *** New SPU Thread [GRP_SPUJOBCellSpursKernel2] (ep=0x0, opt=0x2, a1=0x0, a2=0x0, a3=0x0, a4=0x0): id=34
HLE: E {PPU[1] Thread (CPUThread)[0x002980b8]} sys_spu TODO: Unsupported SPU Thread options (0x2)
HLE: W {PPU[1] Thread (CPUThread)[0x002980b8]} sys_spu warning: *** New SPU Thread [GRP_SPUJOBCellSpursKernel3] (ep=0x0, opt=0x2, a1=0x0, a2=0x0, a3=0x0, a4=0x0): id=35
HLE: E {PPU[1] Thread (CPUThread)[0x002980b8]} sys_spu TODO: Unsupported SPU Thread options (0x2)
HLE: W {PPU[1] Thread (CPUThread)[0x002980b8]} sys_spu warning: *** New SPU Thread [GRP_SPUJOBCellSpursKernel4] (ep=0x0, opt=0x2, a1=0x0, a2=0x0, a3=0x0, a4=0x0): id=36
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_lwmutex : *** lwmutex created [_spuPrv] (attribute=0x22): sq_id = 37
HLE: W {PPU[1] Thread (CPUThread)[0x002980b8]} sys_lwcond warning: *** lwcond created [_spuPrv] (lwmutex_addr=0x302023b0): id = 38
HLE: W {PPU[1] Thread (CPUThread)[0x002980b8]} sys_event warning: *** event_queue created [_spuPrv] (protocol=0x1, type=0x1, key=0x0, size=0x2a): id = 39
HLE: W {PPU[1] Thread (CPUThread)[0x002980b8]} sys_spu warning: sys_spu_thread_group_connect_event_all_threads(id=31, eq_id=39, req=0xffffffffffff0000, spup_addr=0x302016c9)
HLE: W {PPU[1] Thread (CPUThread)[0x002980b8]} sys_spu warning: *** spup -> 16
HLE: W {PPU[1] Thread (CPUThread)[0x002980b8]} sys_event warning: *** sys_event_port created: id = 40
HLE: W {PPU[1] Thread (CPUThread)[0x002980b8]} sys_event warning: sys_event_port_connect_local(eport_id=40, equeue_id=39)
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_ppu_thread : *** New PPU Thread [GRP_SPUJOBSpursHdlr0] (joinable, entry=0x0): id = 41
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_ppu_thread : *** New PPU Thread [GRP_SPUJOBSpursHdlr1] (joinable, entry=0x0): id = 42
HLE: E {PPU[1] Thread (CPUThread)[0x002980b8]} sys_spu TODO: sys_spu_thread_group_connect_event(id=31, eq=39, et=0x2)
HLE: E {PPU[1] Thread (CPUThread)[0x0029804c]} cellSpurs TODO: _cellSpursEventFlagInitialize
HLE: E {PPU[1] Thread (CPUThread)[0x00298088]} cellSpurs TODO: cellSpursEventFlagAttachLv2EventQueue
HLE: E {PPU[1] Thread (CPUThread)[0x00298034]} cellSpurs TODO: _cellSpursJobChainAttributeInitialize
HLE: E {PPU[1] Thread (CPUThread)[0x002980a0]} cellSpurs TODO: cellSpursJobChainAttributeSetName
HLE: E {PPU[1] Thread (CPUThread)[0x00298028]} cellSpurs TODO: cellSpursCreateJobChainWithAttribute
HLE: E {PPU[1] Thread (CPUThread)[0x00298058]} cellSpurs TODO: cellSpursJobGuardInitialize
HLE: E {PPU[1] Thread (CPUThread)[0x002980dc]} cellSpurs TODO: cellSpursRunJobChain
HLE: W {PPU[1] Thread (CPUThread)[0x001e6010]} cellGcmSys warning: _cellGcmInitBody(context_addr=0x249d80, cmdSize=0x10000, ioSize=0x100000, ioAddress=0x31100000)
HLE: W {PPU[1] Thread (CPUThread)[0x001e6010]} cellGcmSys warning: *** local memory(addr=0xc0000000, size=0xf900000)
HLE: W {PPU[1] Thread (CPUThread)[0x001e6010]} cellGcmSys warning: cellGcmInit(): 256MB io address space used
HLE: W {PPU[1] Thread (CPUThread)[0x001e6010]} cellGcmSys warning: cellGcmMapEaIoAddress(ea=0x31100000, io=0x0, size=0x100000)
RSX: ! {RSXThread} RSX thread started
HLE: W {PPU[1] Thread (CPUThread)[0x001ee058]} cellResc warning: cellRescInit(initConfig_addr=0xd000fb60)
HLE: W {PPU[1] Thread (CPUThread)[0x001ee028]} cellResc warning: cellRescSetDisplayMode(displayMode=4)
HLE: W {PPU[1] Thread (CPUThread)[0x001ee028]} cellSysutil warning: cellVideoOutConfigure(videoOut=0, config_addr=0x300d6000, option_addr=0x0, waitForEvent=0x0)
HLE: W {PPU[1] Thread (CPUThread)[0x001ee028]} cellGcmSys warning: cellGcmSetFlipMode(mode=2)
HLE: W {PPU[1] Thread (CPUThread)[0x001ee064]} cellResc warning: cellRescGetBufferSize(colorBuffers_addr=0xd000fb34, vertexArray_addr=0xd000fb40, fragmentShader_addr=0xd000fb38)
HLE: W {PPU[1] Thread (CPUThread)[0x001ee07c]} cellResc warning: cellRescSetBufferAddress(colorBuffers_addr=0xc0000000, vertexArray_addr=0xc1110000, fragmentShader_addr=0xc1110200)
HLE: W {PPU[1] Thread (CPUThread)[0x001e607c]} cellGcmSys warning: cellGcmSetTile(index=0, location=0, offset=0, size=17891328, pitch=5120, comp=0, base=0, bank=0)
HLE: W {PPU[1] Thread (CPUThread)[0x001e607c]} cellGcmSys warning: cellGcmSetTile(index=1, location=0, offset=17956864, size=3801088, pitch=5120, comp=0, base=0, bank=0)
HLE: W {PPU[1] Thread (CPUThread)[0x001e607c]} cellGcmSys warning: cellGcmSetTile(index=2, location=0, offset=21823488, size=3801088, pitch=5120, comp=10, base=0, bank=0)
HLE: E {PPU[1] Thread (CPUThread)[0x001e607c]} cellGcmSys error: cellGcmSetTile: bad compression mode! (10)
HLE: W {PPU[1] Thread (CPUThread)[0x001e607c]} cellGcmSys warning: cellGcmSetTile(index=3, location=0, offset=25690112, size=3801088, pitch=5120, comp=0, base=0, bank=0)
HLE: W {PPU[1] Thread (CPUThread)[0x001e607c]} cellGcmSys warning: cellGcmSetTile(index=4, location=0, offset=29556736, size=3801088, pitch=5120, comp=10, base=0, bank=0)
HLE: E {PPU[1] Thread (CPUThread)[0x001e607c]} cellGcmSys error: cellGcmSetTile: bad compression mode! (10)
HLE: W {PPU[1] Thread (CPUThread)[0x001e6064]} cellGcmSys warning: cellGcmBindZcull(index=0)
HLE: W {PPU[1] Thread (CPUThread)[0x001e607c]} cellGcmSys warning: cellGcmSetTile(index=5, location=0, offset=33423360, size=524288, pitch=2560, comp=0, base=0, bank=0)
HLE: W {PPU[1] Thread (CPUThread)[0x001e607c]} cellGcmSys warning: cellGcmSetTile(index=6, location=0, offset=34013184, size=524288, pitch=2560, comp=0, base=0, bank=0)
HLE: W {PPU[1] Thread (CPUThread)[0x001e607c]} cellGcmSys warning: cellGcmSetTile(index=7, location=0, offset=34603008, size=524288, pitch=2560, comp=0, base=0, bank=0)
HLE: W {PPU[1] Thread (CPUThread)[0x001e607c]} cellGcmSys warning: cellGcmSetTile(index=8, location=0, offset=35192832, size=524288, pitch=2560, comp=0, base=0, bank=0)
HLE: W {PPU[1] Thread (CPUThread)[0x001e607c]} cellGcmSys warning: cellGcmSetTile(index=9, location=0, offset=35782656, size=524288, pitch=2560, comp=0, base=0, bank=0)
HLE: W {PPU[1] Thread (CPUThread)[0x001e607c]} cellGcmSys warning: cellGcmSetTile(index=10, location=0, offset=36372480, size=524288, pitch=2560, comp=0, base=0, bank=0)
HLE: W {PPU[1] Thread (CPUThread)[0x001e607c]} cellGcmSys warning: cellGcmSetTile(index=11, location=0, offset=36962304, size=524288, pitch=2560, comp=0, base=0, bank=0)
HLE: W {PPU[1] Thread (CPUThread)[0x001e6064]} cellGcmSys warning: cellGcmBindZcull(index=1)
HLE: W {PPU[1] Thread (CPUThread)[0x001e6064]} cellGcmSys warning: cellGcmBindZcull(index=2)
HLE: W {PPU[1] Thread (CPUThread)[0x001e6064]} cellGcmSys warning: cellGcmBindZcull(index=3)
HLE: W {PPU[1] Thread (CPUThread)[0x001e6064]} cellGcmSys warning: cellGcmBindZcull(index=4)
HLE: W {PPU[1] Thread (CPUThread)[0x001ee04c]} cellResc warning: cellRescSetFlipHandler(handler_addr=0x1f6358)
HLE: W {PPU[1] Thread (CPUThread)[0x001ee094]} cellResc warning: cellRescSetVBlankHandler(handler_addr=0x1f6360)
HLE: W {PPU[1] Thread (CPUThread)[0x001e4004]} sys_io warning: cellPadInit(max_connect=7)
HLE: W {PPU[1] Thread (CPUThread)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[1] Thread (CPUThread)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_012.gtf", sb_addr=0xd000f388)
HLE: ! {PPU[1] Thread (CPUThread)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_012.gtf" opened: fd = 43
HLE: W {PPU[1] Thread (CPUThread)[0x0029201c]} sys_fs warning: cellFsClose(fd=43)
HLE: W {PPU[1] Thread (CPUThread)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[1] Thread (CPUThread)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_013.gtf", sb_addr=0xd000f388)
HLE: ! {PPU[1] Thread (CPUThread)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_013.gtf" opened: fd = 44
HLE: W {PPU[1] Thread (CPUThread)[0x0029201c]} sys_fs warning: cellFsClose(fd=44)
HLE: W {PPU[1] Thread (CPUThread)[0x001ea07c]} cellSysutil warning: cellAudioOutGetNumberOfDevice(audioOut=0)
HLE: W {PPU[1] Thread (CPUThread)[0x001ea064]} cellSysutil warning: cellAudioOutGetSoundAvailability(audioOut=0, type=0, fs=0x4, option=0)
HLE: W {PPU[1] Thread (CPUThread)[0x001ea040]} cellSysutil warning: cellAudioOutConfigure(audioOut=0, config_addr=0x310aca50, option_addr=0x0, waitForEvent=0)
HLE: W {PPU[1] Thread (CPUThread)[0x001ea094]} cellSysutil warning: cellAudioOutGetState(audioOut=0x0, deviceIndex=0x0, state_addr=0x310aca60)
HLE: W {PPU[1] Thread (CPUThread)[0x001ea070]} cellSysutil warning: cellAudioOutSetCopyControl(audioOut=0,control=2)
HLE: W {PPU[1] Thread (CPUThread)[0x00294004]} cellAudio warning: cellAudioInit()
HLE: ! {Audio Thread} cellAudio : Audio thread started
HLE: W {PPU[1] Thread (CPUThread)[0x0029407c]} cellAudio warning: cellAudioPortOpen(audioParam_addr=0x310acab8, portNum_addr=0x310aca90)
HLE: W {PPU[1] Thread (CPUThread)[0x0029407c]} cellAudio warning: *** audio port opened(nChannel=8, nBlock=8, attr=0x0, level=1.000000): port = 0
HLE: W {PPU[1] Thread (CPUThread)[0x00294040]} cellAudio warning: cellAudioGetPortConfig(portNum=0x0, portConfig_addr=0x310aca98)
HLE: W {PPU[1] Thread (CPUThread)[0x00294058]} cellAudio warning: cellAudioPortStart(portNum=0x0)
HLE: W {PPU[1] Thread (CPUThread)[0x0029407c]} cellAudio warning: cellAudioPortOpen(audioParam_addr=0x310acb08, portNum_addr=0x310acae0)
HLE: W {PPU[1] Thread (CPUThread)[0x0029407c]} cellAudio warning: *** audio port opened(nChannel=8, nBlock=8, attr=0x0, level=1.000000): port = 1
HLE: W {PPU[1] Thread (CPUThread)[0x00294040]} cellAudio warning: cellAudioGetPortConfig(portNum=0x1, portConfig_addr=0x310acae8)
HLE: W {PPU[1] Thread (CPUThread)[0x00294058]} cellAudio warning: cellAudioPortStart(portNum=0x1)
HLE: W {PPU[1] Thread (CPUThread)[0x002a20d0]} sysPrxForUser warning: _sys_heap_create_heap(heap_addr=0x1b8e00, align=0x20000, size=0x110000)
HLE: W {PPU[1] Thread (CPUThread)[0x002a20d0]} sysPrxForUser warning: *** sys_heap created: id = 45
HLE: W {PPU[1] Thread (CPUThread)[0x002a2064]} sysPrxForUser warning: _sys_heap_memalign(heap_id=45, align=0x10, size=0x1080)
HLE: W {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex warning: sys_lwmutex_create(lwmutex_addr=0x300d7640, attr_addr=0x300d7658)
HLE: ! {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex : *** lwmutex created [_mxr004] (attribute=0x22): sq_id = 46
HLE: W {PPU[1] Thread (CPUThread)[0x002a2064]} sysPrxForUser warning: _sys_heap_memalign(heap_id=45, align=0x10, size=0x1c8)
HLE: W {PPU[1] Thread (CPUThread)[0x002a204c]} sysPrxForUser warning: _sys_heap_malloc(heap_id=45, size=0x8)
HLE: W {PPU[1] Thread (CPUThread)[0x002a204c]} sysPrxForUser warning: _sys_heap_malloc(heap_id=45, size=0x8)
HLE: W {PPU[1] Thread (CPUThread)[0x002a204c]} sysPrxForUser warning: _sys_heap_malloc(heap_id=45, size=0x8)
HLE: W {PPU[1] Thread (CPUThread)[0x002a2064]} sysPrxForUser warning: _sys_heap_memalign(heap_id=45, align=0x10, size=0x88)
HLE: W {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex warning: sys_lwmutex_create(lwmutex_addr=0x300dd010, attr_addr=0x300dd028)
HLE: ! {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex : *** lwmutex created [_mxr200] (attribute=0x22): sq_id = 47
HLE: W {PPU[1] Thread (CPUThread)[0x002a2064]} sysPrxForUser warning: _sys_heap_memalign(heap_id=45, align=0x10, size=0x88)
HLE: W {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex warning: sys_lwmutex_create(lwmutex_addr=0x300de010, attr_addr=0x300de028)
HLE: ! {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex : *** lwmutex created [_mxr201] (attribute=0x22): sq_id = 48
HLE: W {PPU[1] Thread (CPUThread)[0x002a2064]} sysPrxForUser warning: _sys_heap_memalign(heap_id=45, align=0x10, size=0x4e00)
HLE: W {PPU[1] Thread (CPUThread)[0x00163748]} sys_mutex warning: *** mutex created [_mxr020] (protocol=0x2, recursive=false): id = 49
HLE: W {PPU[1] Thread (CPUThread)[0x0016376c]} sys_cond warning: *** condition created [] (mutex_id=49): id = 50
HLE: ! {PPU[1] Thread (CPUThread)[0x002a201c]} sys_ppu_thread : *** New PPU Thread [_sys_MixerChStripMain] (non-joinable, entry=0x1f9cf8): id = 51
HLE: W {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex warning: sys_lwmutex_create(lwmutex_addr=0x300d9180, attr_addr=0x300d9198)
HLE: ! {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex : *** lwmutex created [_mxr022] (attribute=0x22): sq_id = 52
HLE: W {PPU[1] Thread (CPUThread)[0x002a2064]} sysPrxForUser warning: _sys_heap_memalign(heap_id=45, align=0x10, size=0x4e80)
HLE: W {PPU[1] Thread (CPUThread)[0x002a2064]} sysPrxForUser warning: _sys_heap_memalign(heap_id=45, align=0x10, size=0x9c80)
HLE: W {PPU[1] Thread (CPUThread)[0x002a2064]} sysPrxForUser warning: _sys_heap_memalign(heap_id=45, align=0x10, size=0x7580)
HLE: W {PPU[1] Thread (CPUThread)[0x0015bcb4]} sys_mutex warning: *** mutex created [_mxr005] (protocol=0x2, recursive=false): id = 53
HLE: W {PPU[1] Thread (CPUThread)[0x0015bcd8]} sys_cond warning: *** condition created [] (mutex_id=53): id = 54
HLE: W {PPU[1] Thread (CPUThread)[0x0015bd64]} sys_mutex warning: *** mutex created [_mxr007] (protocol=0x2, recursive=false): id = 55
HLE: W {PPU[1] Thread (CPUThread)[0x0015bd88]} sys_cond warning: *** condition created [] (mutex_id=55): id = 56
HLE: W {PPU[1] Thread (CPUThread)[0x0015be0c]} sys_mutex warning: *** mutex created [_mxr009] (protocol=0x2, recursive=false): id = 57
HLE: W {PPU[1] Thread (CPUThread)[0x0015be30]} sys_cond warning: *** condition created [] (mutex_id=57): id = 58
HLE: ! {PPU[1] Thread (CPUThread)[0x002a201c]} sys_ppu_thread : *** New PPU Thread [_sys_mixerSurBusReq] (non-joinable, entry=0x1f9a90): id = 59
HLE: W {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex warning: sys_lwmutex_create(lwmutex_addr=0x24a308, attr_addr=0x24a328)
HLE: ! {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex : *** lwmutex created [_mxr001] (attribute=0x22): sq_id = 60
HLE: W {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex warning: sys_lwmutex_create(lwmutex_addr=0x24a2e0, attr_addr=0x24a338)
HLE: ! {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex : *** lwmutex created [_mxr002] (attribute=0x22): sq_id = 61
HLE: ! {PPU[1] Thread (CPUThread)[0x002a201c]} sys_ppu_thread : *** New PPU Thread [_cellsurMixerMain] (non-joinable, entry=0x1f9b50): id = 62
HLE: W {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex warning: sys_lwmutex_create(lwmutex_addr=0x249e30, attr_addr=0x24a354)
HLE: W {PPU[62] Thread (_cellsurMixerMain)[0x0015e078]} sys_event warning: sys_event_queue_create(equeue_id_addr=0x24a324, attr_addr=0x24b3d0, event_queue_key=0x8000cafe02460300, size=2)
HLE: ! {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex : *** lwmutex created [_mxr003] (attribute=0x22): sq_id = 63
HLE: W {PPU[62] Thread (_cellsurMixerMain)[0x0015e078]} sys_event warning: *** event_queue created [_mxr000] (protocol=0x1, type=0x1, key=0x8000cafe02460300, size=0x2): id = 64
HLE: W {PPU[1] Thread (CPUThread)[0x0029407c]} cellAudio warning: cellAudioPortOpen(audioParam_addr=0x24a368, portNum_addr=0x24a2d8)
HLE: W {PPU[1] Thread (CPUThread)[0x0029407c]} cellAudio warning: *** audio port opened(nChannel=8, nBlock=8, attr=0x0, level=1.000000): port = 2
HLE: W {PPU[1] Thread (CPUThread)[0x00294040]} cellAudio warning: cellAudioGetPortConfig(portNum=0x2, portConfig_addr=0x24a388)
HLE: W {PPU[1] Thread (CPUThread)[0x00294058]} cellAudio warning: cellAudioPortStart(portNum=0x2)
HLE: W {PPU[1] Thread (CPUThread)[0x002940a0]} cellAudio warning: cellAudioSetNotifyEventQueue(key=0x8000cafe02460300)
HLE: W {PPU[1] Thread (CPUThread)[0x00298094]} cellSpurs warning: _cellSpursAttributeInitialize(attr_addr=0xd000f718, revision=2, sdkVersion=0x300000, nSpus=1, spuPriority=250, ppuPriority=599, exitIfNoWork=1)
HLE: W {PPU[1] Thread (CPUThread)[0x00298004]} cellSpurs warning: cellSpursAttributeSetNamePrefix(attr_addr=0xd000f718, prefix_addr=0x1b4640, size=10)
HLE: W {PPU[1] Thread (CPUThread)[0x00298010]} cellSpurs warning: cellSpursAttributeEnableSpuPrintfIfAvailable(attr_addr=0xd000f718)
HLE: W {PPU[1] Thread (CPUThread)[0x000ba230]} sys_memory warning: sys_memory_container_create(cid_addr=0x310a3200, yield_size=0x100000)
HLE: W {PPU[1] Thread (CPUThread)[0x000ba230]} sys_memory warning: *** memory_container created(addr=0x31c00000): id = 65
HLE: W {PPU[1] Thread (CPUThread)[0x0029807c]} cellSpurs warning: cellSpursAttributeSetMemoryContainerForSpuThread(attr_addr=0xd000f718, container=65)
HLE: W {PPU[1] Thread (CPUThread)[0x002980b8]} cellSpurs warning: cellSpursInitializeWithAttribute(spurs_addr=0x310a2200, attr_addr=0xd000f718)
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 66
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 67
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 68
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 69
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 70
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 71
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 72
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 73
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 74
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 75
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 76
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 77
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 78
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 79
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 80
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 81
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuPrv] (protocol=0x2): id = 82
HLE: E {PPU[1] Thread (CPUThread)[0x002980b8]} sys_spu TODO: Unsupported SPU Thread Group type (0x4)
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_spu : *** SPU Thread Group created [SOUND_CONVCellSpursKernelGroup] (num=1, prio=250, type=0x4, container=65): id=83
HLE: E {PPU[1] Thread (CPUThread)[0x002980b8]} sys_spu TODO: Unsupported SPU Thread options (0x2)
HLE: W {PPU[1] Thread (CPUThread)[0x002980b8]} sys_spu warning: *** New SPU Thread [SOUND_CONVCellSpursKernel0] (ep=0x0, opt=0x2, a1=0x0, a2=0x0, a3=0x0, a4=0x0): id=84
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_lwmutex : *** lwmutex created [_spuPrv] (attribute=0x22): sq_id = 85
HLE: W {PPU[1] Thread (CPUThread)[0x002980b8]} sys_lwcond warning: *** lwcond created [_spuPrv] (lwmutex_addr=0x310a2fb0): id = 86
HLE: W {PPU[1] Thread (CPUThread)[0x002980b8]} sys_event warning: *** event_queue created [_spuPrv] (protocol=0x1, type=0x1, key=0x0, size=0x2a): id = 87
HLE: W {PPU[1] Thread (CPUThread)[0x002980b8]} sys_spu warning: sys_spu_thread_group_connect_event_all_threads(id=83, eq_id=87, req=0xffffffffffff0000, spup_addr=0x310a22c9)
HLE: W {PPU[1] Thread (CPUThread)[0x002980b8]} sys_spu warning: *** spup -> 16
HLE: W {PPU[1] Thread (CPUThread)[0x002980b8]} sys_event warning: *** sys_event_port created: id = 88
HLE: W {PPU[1] Thread (CPUThread)[0x002980b8]} sys_event warning: sys_event_port_connect_local(eport_id=88, equeue_id=87)
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_ppu_thread : *** New PPU Thread [SOUND_CONVSpursHdlr0] (joinable, entry=0x0): id = 89
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_ppu_thread : *** New PPU Thread [SOUND_CONVSpursHdlr1] (joinable, entry=0x0): id = 90
HLE: E {PPU[1] Thread (CPUThread)[0x002980b8]} sys_spu TODO: sys_spu_thread_group_connect_event(id=83, eq=87, et=0x2)
HLE: E {PPU[1] Thread (CPUThread)[0x00298034]} cellSpurs TODO: _cellSpursJobChainAttributeInitialize
HLE: E {PPU[1] Thread (CPUThread)[0x002980a0]} cellSpurs TODO: cellSpursJobChainAttributeSetName
HLE: E {PPU[1] Thread (CPUThread)[0x00298028]} cellSpurs TODO: cellSpursCreateJobChainWithAttribute
HLE: E {PPU[1] Thread (CPUThread)[0x002980dc]} cellSpurs TODO: cellSpursRunJobChain
HLE: E {PPU[1] Thread (CPUThread)[0x002980ac]} cellSpurs TODO: cellSpursJoinJobChain
HLE: W {PPU[1] Thread (CPUThread)[0x001ea064]} cellSysutil warning: cellAudioOutGetSoundAvailability(audioOut=0, type=0, fs=0x4, option=0)
HLE: W {PPU[1] Thread (CPUThread)[0x001ea040]} cellSysutil warning: cellAudioOutConfigure(audioOut=0, config_addr=0xd000f6e0, option_addr=0x0, waitForEvent=1)
HLE: W {PPU[1] Thread (CPUThread)[0x001ea094]} cellSysutil warning: cellAudioOutGetState(audioOut=0x0, deviceIndex=0x0, state_addr=0xd000f6f0)
HLE: W {PPU[1] Thread (CPUThread)[0x00298094]} cellSpurs warning: _cellSpursAttributeInitialize(attr_addr=0xd000f4d8, revision=2, sdkVersion=0x300000, nSpus=1, spuPriority=250, ppuPriority=750, exitIfNoWork=1)
HLE: W {PPU[1] Thread (CPUThread)[0x00298004]} cellSpurs warning: cellSpursAttributeSetNamePrefix(attr_addr=0xd000f4d8, prefix_addr=0x1b46a0, size=13)
HLE: W {PPU[1] Thread (CPUThread)[0x000ba230]} sys_memory warning: sys_memory_container_create(cid_addr=0x310a4300, yield_size=0x100000)
HLE: W {PPU[1] Thread (CPUThread)[0x000ba230]} sys_memory warning: *** memory_container created(addr=0x32200000): id = 91
HLE: W {PPU[1] Thread (CPUThread)[0x0029807c]} cellSpurs warning: cellSpursAttributeSetMemoryContainerForSpuThread(attr_addr=0xd000f4d8, container=91)
HLE: W {PPU[1] Thread (CPUThread)[0x002980b8]} cellSpurs warning: cellSpursInitializeWithAttribute(spurs_addr=0x310a3300, attr_addr=0xd000f4d8)
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 92
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 93
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 94
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 95
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 96
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 97
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 98
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 99
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 100
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 101
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 102
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 103
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 104
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 105
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 106
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuWkl] (protocol=0x2): id = 107
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_semaphore : *** semaphore created [_spuPrv] (protocol=0x2): id = 108
HLE: E {PPU[1] Thread (CPUThread)[0x002980b8]} sys_spu TODO: Unsupported SPU Thread Group type (0x4)
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_spu : *** SPU Thread Group created [SPURS_FOR_DSPCellSpursKernelGroup] (num=1, prio=250, type=0x4, container=91): id=109
HLE: E {PPU[1] Thread (CPUThread)[0x002980b8]} sys_spu TODO: Unsupported SPU Thread options (0x2)
HLE: W {PPU[1] Thread (CPUThread)[0x002980b8]} sys_spu warning: *** New SPU Thread [SPURS_FOR_DSPCellSpursKernel0] (ep=0x0, opt=0x2, a1=0x0, a2=0x0, a3=0x0, a4=0x0): id=110
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_lwmutex : *** lwmutex created [_spuPrv] (attribute=0x22): sq_id = 111
HLE: W {PPU[1] Thread (CPUThread)[0x002980b8]} sys_lwcond warning: *** lwcond created [_spuPrv] (lwmutex_addr=0x310a40b0): id = 112
HLE: W {PPU[1] Thread (CPUThread)[0x002980b8]} sys_event warning: *** event_queue created [_spuPrv] (protocol=0x1, type=0x1, key=0x0, size=0x2a): id = 113
HLE: W {PPU[1] Thread (CPUThread)[0x002980b8]} sys_spu warning: sys_spu_thread_group_connect_event_all_threads(id=109, eq_id=113, req=0xffffffffffff0000, spup_addr=0x310a33c9)
HLE: W {PPU[1] Thread (CPUThread)[0x002980b8]} sys_spu warning: *** spup -> 16
HLE: W {PPU[1] Thread (CPUThread)[0x002980b8]} sys_event warning: *** sys_event_port created: id = 114
HLE: W {PPU[1] Thread (CPUThread)[0x002980b8]} sys_event warning: sys_event_port_connect_local(eport_id=114, equeue_id=113)
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_ppu_thread : *** New PPU Thread [SPURS_FOR_DSPSpursHdlr0] (joinable, entry=0x0): id = 115
HLE: ! {PPU[1] Thread (CPUThread)[0x002980b8]} sys_ppu_thread : *** New PPU Thread [SPURS_FOR_DSPSpursHdlr1] (joinable, entry=0x0): id = 116
HLE: E {PPU[1] Thread (CPUThread)[0x002980b8]} sys_spu TODO: sys_spu_thread_group_connect_event(id=109, eq=113, et=0x2)
HLE: W {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex warning: sys_lwmutex_create(lwmutex_addr=0x24df00, attr_addr=0xd000f5b0)
HLE: ! {PPU[1] Thread (CPUThread)[0x002a2034]} sys_lwmutex : *** lwmutex created [] (attribute=0x22): sq_id = 117
HLE: W {PPU[1] Thread (CPUThread)[0x00298100]} cellSpurs warning: cellSpursCreateTaskset(spurs_addr=0x310a3300, taskset_addr=0x24e300, args=0x0, priority_addr=0xd000f7c0, maxContention=1)
HLE: E {PPU[1] Thread (CPUThread)[0x0029804c]} cellSpurs TODO: _cellSpursEventFlagInitialize
HLE: E {PPU[1] Thread (CPUThread)[0x00298088]} cellSpurs TODO: cellSpursEventFlagAttachLv2EventQueue
HLE: E {PPU[1] Thread (CPUThread)[0x0029804c]} cellSpurs TODO: _cellSpursEventFlagInitialize
HLE: W {PPU[1] Thread (CPUThread)[0x00165280]} sys_event warning: sys_event_queue_create(equeue_id_addr=0x24dc80, attr_addr=0xd000f644, event_queue_key=0x0, size=8)
HLE: W {PPU[1] Thread (CPUThread)[0x00165280]} sys_event warning: *** event_queue created [] (protocol=0x2, type=0x1, key=0x0, size=0x8): id = 118
HLE: ! {PPU[1] Thread (CPUThread)[0x002a201c]} sys_ppu_thread : *** New PPU Thread [spu_printf_handler] (joinable, entry=0x1f9db0): id = 119
HLE: W {PPU[1] Thread (CPUThread)[0x00165310]} sys_event warning: sys_event_port_create(eport_id_addr=0x24dc00, port_type=0x1, name=0xfee1dead)
HLE: W {PPU[1] Thread (CPUThread)[0x00165310]} sys_event warning: *** sys_event_port created: id = 120
HLE: W {PPU[1] Thread (CPUThread)[0x00165328]} sys_event warning: sys_event_port_connect_local(eport_id=120, equeue_id=118)
HLE: W {PPU[1] Thread (CPUThread)[0x00298124]} cellSpurs warning: cellSpursAttachLv2EventQueue(spurs_addr=0x310a3300, queue=118, port_addr=0xd000f640, isDynamic=0)
HLE: W {PPU[1] Thread (CPUThread)[0x00298124]} sys_spu warning: sys_spu_thread_group_connect_event_all_threads(id=109, eq_id=118, req=0x2, spup_addr=0xd000f640)
HLE: W {PPU[1] Thread (CPUThread)[0x00298124]} sys_spu warning: *** spup -> 1
HLE: E {PPU[1] Thread (CPUThread)[0x00298130]} cellSpurs TODO: cellSpursCreateTask
HLE: ! {PPU[1] Thread (CPUThread)[0x00292034]} sys_fs : "/dev_flash/sys/external/flashATRAC.pic" opened: fd = 121
HLE: W {PPU[1] Thread (CPUThread)[0x0029201c]} sys_fs warning: cellFsClose(fd=121)
HLE: E {PPU[1] Thread (CPUThread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[1] Thread (CPUThread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[1] Thread (CPUThread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[1] Thread (CPUThread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: ! {PPU[1] Thread (CPUThread)[0x002a201c]} sys_ppu_thread : *** New PPU Thread [MultiStream PU Thread] (joinable, entry=0x1f1a80): id = 122
HLE: E {PPU[1] Thread (CPUThread)[0x00294028]} cellAudio TODO: cellAudioSetPortLevel(portNum=0x1, level=1.000000)
HLE: ! {PPU[1] Thread (CPUThread)[0x002a201c]} sys_ppu_thread : *** New PPU Thread [sound thread] (joinable, entry=0x1f1910): id = 123
HLE: E {PPU[1] Thread (CPUThread)[0x00294028]} cellAudio TODO: cellAudioSetPortLevel(portNum=0x1, level=0.000000)
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: ! {PPU[1] Thread (CPUThread)[0x002a201c]} sys_ppu_thread : *** New PPU Thread [DA_NEXT::Make2] (non-joinable, entry=0x1f0c08): id = 124
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001ec01c]} cellGame warning: cellGameBootCheck(type_addr=0x2241e0, attributes_addr=0x2241e4, size_addr=0x2241e8, dirName_addr=0x2241f8)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001ec004]} cellGame warning: cellGameContentPermit(contentInfoPath_addr=0x224218, usrdirPath_addr=0x224298)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029e064]} sceNpTrophy warning: sceNpTrophyCreateContext(context_addr=0x2241c0, commID_addr=0x223560, commSign_addr=0x1b20d0, options=0x0)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029e010]} sceNpTrophy warning: sceNpTrophyCreateHandle(handle_addr=0x2241bc)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029e01c]} sceNpTrophy warning: sceNpTrophyGetRequiredDiskSpace(context=0, handle=0, reqspace_addr=0x224318, options=0x0)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029e004]} sceNpTrophy warning: sceNpTrophyRegisterContext(context=0, handle=0, statusCb_addr=0x1f0bb8, arg_addr=0x0, options=0x0)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029e004]} vfsLocalFile::Create('D:\Emulateurs\Rpcs3\dev_hdd0\home\00000001\trophy\NPWR01116_00\TROPCONF.SFM')
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029e004]} vfsLocalFile::Create('D:\Emulateurs\Rpcs3\dev_hdd0\home\00000001\trophy\NPWR01116_00\ICON0.PNG')
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029e004]} vfsLocalFile::Create('D:\Emulateurs\Rpcs3\dev_hdd0\home\00000001\trophy\NPWR01116_00\TROP000.PNG')
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029e004]} vfsLocalFile::Create('D:\Emulateurs\Rpcs3\dev_hdd0\home\00000001\trophy\NPWR01116_00\TROP001.PNG')
HLE: W {PPU[1] Thread (CPUThread)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[1] Thread (CPUThread)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/2d/t_007_001_000_000_000.gtf", sb_addr=0xd000f248)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029e004]} vfsLocalFile::Create('D:\Emulateurs\Rpcs3\dev_hdd0\home\00000001\trophy\NPWR01116_00\TROP002.PNG')
HLE: ! {PPU[1] Thread (CPUThread)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/2d/t_007_001_000_000_000.gtf" opened: fd = 125
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029e004]} vfsLocalFile::Create('D:\Emulateurs\Rpcs3\dev_hdd0\home\00000001\trophy\NPWR01116_00\TROP003.PNG')
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029e004]} vfsLocalFile::Create('D:\Emulateurs\Rpcs3\dev_hdd0\home\00000001\trophy\NPWR01116_00\TROP004.PNG')
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029e004]} vfsLocalFile::Create('D:\Emulateurs\Rpcs3\dev_hdd0\home\00000001\trophy\NPWR01116_00\TROP005.PNG')
HLE: W {PPU[1] Thread (CPUThread)[0x0029201c]} sys_fs warning: cellFsClose(fd=125)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029e004]} vfsLocalFile::Create('D:\Emulateurs\Rpcs3\dev_hdd0\home\00000001\trophy\NPWR01116_00\TROP006.PNG')
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029e004]} vfsLocalFile::Create('D:\Emulateurs\Rpcs3\dev_hdd0\home\00000001\trophy\NPWR01116_00\TROP007.PNG')
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029e004]} vfsLocalFile::Create('D:\Emulateurs\Rpcs3\dev_hdd0\home\00000001\trophy\NPWR01116_00\TROP008.PNG')
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029e004]} vfsLocalFile::Create('D:\Emulateurs\Rpcs3\dev_hdd0\home\00000001\trophy\NPWR01116_00\TROP009.PNG')
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029e004]} vfsLocalFile::Create('D:\Emulateurs\Rpcs3\dev_hdd0\home\00000001\trophy\NPWR01116_00\TROP010.PNG')
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029e004]} vfsLocalFile::Create('D:\Emulateurs\Rpcs3\dev_hdd0\home\00000001\trophy\NPWR01116_00\TROP011.PNG')
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029e004]} vfsLocalFile::Create('D:\Emulateurs\Rpcs3\dev_hdd0\home\00000001\trophy\NPWR01116_00\TROP012.PNG')
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029e004]} vfsLocalFile::Create('D:\Emulateurs\Rpcs3\dev_hdd0\home\00000001\trophy\NPWR01116_00\TROP013.PNG')
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029e004]} vfsLocalFile::Create('D:\Emulateurs\Rpcs3\dev_hdd0\home\00000001\trophy\NPWR01116_00\TROP014.PNG')
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029e004]} vfsLocalFile::Create('D:\Emulateurs\Rpcs3\dev_hdd0\home\00000001\trophy\NPWR01116_00\TROP015.PNG')
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029e004]} vfsLocalFile::Create('D:\Emulateurs\Rpcs3\dev_hdd0\home\00000001\trophy\NPWR01116_00\TROP016.PNG')
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029e004]} vfsLocalFile::Create('D:\Emulateurs\Rpcs3\dev_hdd0\home\00000001\trophy\NPWR01116_00\TROP017.PNG')
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029e004]} vfsLocalFile::Create('D:\Emulateurs\Rpcs3\dev_hdd0\home\00000001\trophy\NPWR01116_00\TROP018.PNG')
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_LANG
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/2d/t_002_001_000_000_000.gtf", sb_addr=0xd015f3a8)
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/2d/t_002_001_000_000_000.gtf" opened: fd = 126
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=126)
PPU: ! {PPULLVMRecompiler} Removed 3 old versions
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/2d/t_002_001_000_000_001.gtf", sb_addr=0xd015f3a8)
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/2d/t_002_001_000_000_001.gtf" opened: fd = 127
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=127)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/font_info_01.bin" opened: fd = 128
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=128, sb_addr=0xd015f970)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=128)
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} New FBO (1280x720)
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/sc_font_info_01.bin" opened: fd = 129
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=129, sb_addr=0xd015f970)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=129)
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} FP not found in buffer!
RSX: W {RSXThread} VP not found in buffer!
RSX: ! {RSXThread} Add program (0):
RSX: ! {RSXThread} *** prog id = 3
RSX: ! {RSXThread} *** vp id = 2
RSX: ! {RSXThread} *** fp id = 1
RSX: ! {RSXThread} *** vp data size = 240
RSX: ! {RSXThread} *** fp data size = 320
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp1;
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp1.x = (1.0 / vc[466].xxxx).x;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp0.y = -tmp1.xxxx.y;
	tmp0.x = (1.0 / vc[467].xxxx).x;
	tmp0.w = tmp1.xxxx.w;
	tmp1.y = tmp1.xxxx.y;
	tmp0.z = tmp0.xxxx.z;
	tmp1.x = -tmp0.xxxx.x;
	dst_reg7.xy = (in_tc0.xyxx + tmp1.xyxx).xy;
	dst_reg8.xy = (in_tc0.xyxx + -tmp0.zwzz).xy;
	dst_reg9.xy = (in_tc0.xyxx + tmp0.zwzz).xy;
	dst_reg10.xy = (in_tc0.xyxx + tmp0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h1 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
in vec4 tc1;
in vec4 tc2;
in vec4 tc3;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc112 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc272 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	r1.xyz = texture(tex0, tc1.xy).xyz;
	h1.xyz = r1.xyz;
	h1.w = fc112.xxxx.w;
	r1.xyz = texture(tex0, tc2.xy).xyz;
	h1 = (h0 + h1);
	h0.xyz = r1.xyz;
	h0.w = fc192.xxxx.w;
	h0 = (h1 + h0);
	r1.xyz = texture(tex0, tc3.xy).xyz;
	h1.xyz = r1.xyz;
	h1.w = fc272.xxxx.w;
	h0 = ((h0 + h1) / 4.0);
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/pt_member_01.bin" opened: fd = 130
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=130, sb_addr=0xd015f980)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=130)
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} FP not found in buffer!
RSX: W {RSXThread} VP not found in buffer!
RSX: ! {RSXThread} Add program (1):
RSX: ! {RSXThread} *** prog id = 6
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 4
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
layout (location = 0) out vec4 ocol0;

void main()
{
	r0 = texture(tex0, tc0.xy);
	h0 = r0;
	ocol0 = h0;
}

HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/command_01.bin" opened: fd = 131
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=131, sb_addr=0xd015f980)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=131)
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} FP not found in buffer!
RSX: W {RSXThread} VP not found in buffer!
RSX: ! {RSXThread} Add program (2):
RSX: ! {RSXThread} *** prog id = 9
RSX: ! {RSXThread} *** vp id = 8
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 672
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.x = vec4((1.0 / vc[467].xxxx).x).x;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.y = vc[463].xxxx.y;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.y = (vc[464].xxxx + tmp0.yyyy).y;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.yyyy).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.y = vc[452].yyyy.y;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/option_01.bin" opened: fd = 132
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=132, sb_addr=0xd015f980)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=132)
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} VP not found in buffer!
RSX: ! {RSXThread} Add program (3):
RSX: ! {RSXThread} *** prog id = 11
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 672
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/yesno_01.bin" opened: fd = 133
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=133, sb_addr=0xd015f980)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=133)
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/defense_01.bin" opened: fd = 134
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=134, sb_addr=0xd015f980)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=134)
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} FP not found in buffer!
RSX: ! {RSXThread} Add program (4):
RSX: ! {RSXThread} *** prog id = 13
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 64
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (5):
RSX: ! {RSXThread} *** prog id = 14
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 64
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/magic_level_01.bin" opened: fd = 135
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=135, sb_addr=0xd015f980)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=135)
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (6):
RSX: ! {RSXThread} *** prog id = 15
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 64
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/equip_part_01.bin" opened: fd = 136
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=136, sb_addr=0xd015f980)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=136)
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} FP not found in buffer!
RSX: ! {RSXThread} Add program (7):
RSX: ! {RSXThread} *** prog id = 17
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 400
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/stamp_magic_01.bin" opened: fd = 137
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=137, sb_addr=0xd015f970)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=137)
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} FP not found in buffer!
RSX: W {RSXThread} VP not found in buffer!
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (8):
RSX: ! {RSXThread} *** prog id = 20
RSX: ! {RSXThread} *** vp id = 19
RSX: ! {RSXThread} *** fp id = 18
RSX: ! {RSXThread} *** vp data size = 208
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg1 = vec4(0.0);
vec4 dst_reg7 = vec4(0.0);
vec4 tmp0;
vec4 tmp1;
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 3) in vec4 in_diff_color;
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 diff_color;
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	diff_color = dst_reg1;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg1 = (in_diff_color * vc[463]);
	dst_reg7.xy = (vc[462].xyxx + in_tc0.xyxx).xy;
	tmp0.xy = (in_pos.yxyy * vc[467].yxyy).xy;
	tmp1.y = vec4((1.0 / vc[464].xxxx).y).y;
	dst_reg0.zw = in_pos.zzzw.zw;
	tmp1.x = (1.0 / vc[464].yyyy).x;
	tmp0.zw = (tmp0.xxxx * vc[466].yyyx).zw;
	tmp0.x = (tmp0.yyyy * vc[466].xxxx + -tmp0.zzzz).x;
	tmp0.y = (tmp0.yyyy * vc[466].yyyy + tmp0.wwww).y;
	tmp0.y = (vc[465].yyyy + tmp0.yyyy).y;
	tmp0.x = (vc[465].xxxx + tmp0.xxxx).x;
	tmp0.y = (tmp0.yyyy * tmp1.xxxx + -vc[461].xxxx).y;
	dst_reg0.x = (tmp0.xxxx * tmp1.yyyy + -vc[461].xxxx).x;
	dst_reg0.y = -tmp0.yyyy.y;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
in vec4 diff_color;
layout (location = 0) out vec4 ocol0;

void main()
{
	r0 = texture(tex0, tc0.xy);
	r0 = (r0 * diff_color);
	ocol0 = r0;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/strength_magic_01.bin" opened: fd = 138
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=138, sb_addr=0xd015f970)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=138)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/enemy_01.bin" opened: fd = 139
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=139, sb_addr=0xd015f970)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=139)
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (9):
RSX: ! {RSXThread} *** prog id = 21
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (10):
RSX: ! {RSXThread} *** prog id = 22
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (11):
RSX: ! {RSXThread} *** prog id = 23
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/party_data.bin" opened: fd = 140
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=140, sb_addr=0xd015f980)
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=140)
RSX: ! {RSXThread} Add program (12):
RSX: ! {RSXThread} *** prog id = 24
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (13):
RSX: ! {RSXThread} *** prog id = 25
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/part_01.bin" opened: fd = 141
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=141, sb_addr=0xd015f980)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=141)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/bg_01.bin" opened: fd = 142
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=142, sb_addr=0xd015f980)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=142)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/mess_01.bin" opened: fd = 143
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=143, sb_addr=0xd015f980)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=143)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (14):
RSX: ! {RSXThread} *** prog id = 26
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (15):
RSX: ! {RSXThread} *** prog id = 27
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (16):
RSX: ! {RSXThread} *** prog id = 28
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (17):
RSX: ! {RSXThread} *** prog id = 29
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (18):
RSX: ! {RSXThread} *** prog id = 30
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/tuto_01.bin" opened: fd = 144
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=144, sb_addr=0xd015f980)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=144)
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/battle_pos_data.bin" opened: fd = 145
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=145, sb_addr=0xd015fa90)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=145)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/char_data.bin" opened: fd = 146
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=146, sb_addr=0xd015f980)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=146)
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/model_data.bin" opened: fd = 147
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=147, sb_addr=0xd015f980)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=147)
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (19):
RSX: ! {RSXThread} *** prog id = 31
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (20):
RSX: ! {RSXThread} *** prog id = 32
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (21):
RSX: ! {RSXThread} *** prog id = 33
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (22):
RSX: ! {RSXThread} *** prog id = 34
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (23):
RSX: ! {RSXThread} *** prog id = 35
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
PPU: ! {PPULLVMRecompiler} Removed 1 old versions
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (24):
RSX: ! {RSXThread} *** prog id = 36
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (25):
RSX: ! {RSXThread} *** prog id = 37
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (26):
RSX: ! {RSXThread} *** prog id = 38
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (27):
RSX: ! {RSXThread} *** prog id = 39
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (28):
RSX: ! {RSXThread} *** prog id = 40
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (29):
RSX: ! {RSXThread} *** prog id = 41
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (30):
RSX: ! {RSXThread} *** prog id = 42
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (31):
RSX: ! {RSXThread} *** prog id = 43
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (32):
RSX: ! {RSXThread} *** prog id = 44
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (33):
RSX: ! {RSXThread} *** prog id = 45
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (34):
RSX: ! {RSXThread} *** prog id = 46
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (35):
RSX: ! {RSXThread} *** prog id = 47
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
PPU: ! {PPULLVMRecompiler} Removed 13 old versions
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (36):
RSX: ! {RSXThread} *** prog id = 48
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (37):
RSX: ! {RSXThread} *** prog id = 49
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (38):
RSX: ! {RSXThread} *** prog id = 50
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (39):
RSX: ! {RSXThread} *** prog id = 51
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (40):
RSX: ! {RSXThread} *** prog id = 52
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (41):
RSX: ! {RSXThread} *** prog id = 53
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (42):
RSX: ! {RSXThread} *** prog id = 54
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (43):
RSX: ! {RSXThread} *** prog id = 55
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (44):
RSX: ! {RSXThread} *** prog id = 56
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (45):
RSX: ! {RSXThread} *** prog id = 57
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (46):
RSX: ! {RSXThread} *** prog id = 58
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (47):
RSX: ! {RSXThread} *** prog id = 59
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (48):
RSX: ! {RSXThread} *** prog id = 60
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (49):
RSX: ! {RSXThread} *** prog id = 61
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (50):
RSX: ! {RSXThread} *** prog id = 62
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/ei_data.bin" opened: fd = 148
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=148, sb_addr=0xd015f970)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=148)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (51):
RSX: ! {RSXThread} *** prog id = 63
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (52):
RSX: ! {RSXThread} *** prog id = 64
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (53):
RSX: ! {RSXThread} *** prog id = 65
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (54):
RSX: ! {RSXThread} *** prog id = 66
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (55):
RSX: ! {RSXThread} *** prog id = 67
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (56):
RSX: ! {RSXThread} *** prog id = 68
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (57):
RSX: ! {RSXThread} *** prog id = 69
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (58):
RSX: ! {RSXThread} *** prog id = 70
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (59):
RSX: ! {RSXThread} *** prog id = 71
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (60):
RSX: ! {RSXThread} *** prog id = 72
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (61):
RSX: ! {RSXThread} *** prog id = 73
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (62):
RSX: ! {RSXThread} *** prog id = 74
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/effect_data.bin" opened: fd = 149
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=149, sb_addr=0xd015f980)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=149)
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (63):
RSX: ! {RSXThread} *** prog id = 75
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/bg_char_data.bin" opened: fd = 150
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=150, sb_addr=0xd015f980)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=150)
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/tb_data.bin" opened: fd = 151
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=151, sb_addr=0xd015f980)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=151)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/state_data.bin" opened: fd = 152
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=152, sb_addr=0xd015fa90)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=152)
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/ev2d_data.bin" opened: fd = 153
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=153, sb_addr=0xd015f980)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=153)
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/tec_list_01.bin" opened: fd = 154
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=154, sb_addr=0xd015f980)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=154)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/item_list_01.bin" opened: fd = 155
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=155, sb_addr=0xd015f980)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=155)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (64):
RSX: ! {RSXThread} *** prog id = 76
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (65):
RSX: ! {RSXThread} *** prog id = 77
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (66):
RSX: ! {RSXThread} *** prog id = 78
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (67):
RSX: ! {RSXThread} *** prog id = 79
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (68):
RSX: ! {RSXThread} *** prog id = 80
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/sc_01.bin" opened: fd = 156
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=156, sb_addr=0xd015f980)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=156)
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (69):
RSX: ! {RSXThread} *** prog id = 81
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (70):
RSX: ! {RSXThread} *** prog id = 82
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (71):
RSX: ! {RSXThread} *** prog id = 83
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/dai1_list_01.bin" opened: fd = 157
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=157, sb_addr=0xd015f980)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=157)
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (72):
RSX: ! {RSXThread} *** prog id = 84
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (73):
RSX: ! {RSXThread} *** prog id = 85
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/dai2_list_01.bin" opened: fd = 158
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=158, sb_addr=0xd015f980)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=158)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/dai3_list_01.bin" opened: fd = 159
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=159, sb_addr=0xd015f980)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=159)
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/hs1_list_01.bin" opened: fd = 160
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=160, sb_addr=0xd015f980)
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=160)
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/hs2_list_01.bin" opened: fd = 161
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=161, sb_addr=0xd015f980)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=161)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (74):
RSX: ! {RSXThread} *** prog id = 86
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (75):
RSX: ! {RSXThread} *** prog id = 87
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (76):
RSX: ! {RSXThread} *** prog id = 88
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/table/hs3_list_01.bin" opened: fd = 162
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=162, sb_addr=0xd015f980)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=162)
RSX: ! {RSXThread} Add program (77):
RSX: ! {RSXThread} *** prog id = 89
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (78):
RSX: ! {RSXThread} *** prog id = 90
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (79):
RSX: ! {RSXThread} *** prog id = 91
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (80):
RSX: ! {RSXThread} *** prog id = 92
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (81):
RSX: ! {RSXThread} *** prog id = 93
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (82):
RSX: ! {RSXThread} *** prog id = 94
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (83):
RSX: ! {RSXThread} *** prog id = 95
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (84):
RSX: ! {RSXThread} *** prog id = 96
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (85):
RSX: ! {RSXThread} *** prog id = 97
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (86):
RSX: ! {RSXThread} *** prog id = 98
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (87):
RSX: ! {RSXThread} *** prog id = 99
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (88):
RSX: ! {RSXThread} *** prog id = 100
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (89):
RSX: ! {RSXThread} *** prog id = 101
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (90):
RSX: ! {RSXThread} *** prog id = 102
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (91):
RSX: ! {RSXThread} *** prog id = 103
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (92):
RSX: ! {RSXThread} *** prog id = 104
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (93):
RSX: ! {RSXThread} *** prog id = 105
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_048.gtf", sb_addr=0xd015f438)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_048.gtf" opened: fd = 163
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=163)
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_049.gtf", sb_addr=0xd015f438)
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_049.gtf" opened: fd = 164
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=164)
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_050.gtf", sb_addr=0xd015f438)
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_050.gtf" opened: fd = 165
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=165)
RSX: ! {RSXThread} Add program (94):
RSX: ! {RSXThread} *** prog id = 106
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (95):
RSX: ! {RSXThread} *** prog id = 107
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_051.gtf", sb_addr=0xd015f438)
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_051.gtf" opened: fd = 166
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=166)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (96):
RSX: ! {RSXThread} *** prog id = 108
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (97):
RSX: ! {RSXThread} *** prog id = 109
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_022.gtf", sb_addr=0xd015f438)
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_022.gtf" opened: fd = 167
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=167)
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (98):
RSX: ! {RSXThread} *** prog id = 110
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (99):
RSX: ! {RSXThread} *** prog id = 111
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (100):
RSX: ! {RSXThread} *** prog id = 112
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (101):
RSX: ! {RSXThread} *** prog id = 113
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (102):
RSX: ! {RSXThread} *** prog id = 114
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (103):
RSX: ! {RSXThread} *** prog id = 115
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (104):
RSX: ! {RSXThread} *** prog id = 116
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (105):
RSX: ! {RSXThread} *** prog id = 117
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (106):
RSX: ! {RSXThread} *** prog id = 118
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (107):
RSX: ! {RSXThread} *** prog id = 119
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (108):
RSX: ! {RSXThread} *** prog id = 120
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_062.gtf", sb_addr=0xd015f418)
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_062.gtf" opened: fd = 168
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=168)
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_063.gtf", sb_addr=0xd015f418)
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_063.gtf" opened: fd = 169
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=169)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_064.gtf", sb_addr=0xd015f418)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_064.gtf" opened: fd = 170
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=170)
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_049.gtf", sb_addr=0xd015f418)
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_049.gtf" opened: fd = 171
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=171)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_050.gtf", sb_addr=0xd015f418)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_050.gtf" opened: fd = 172
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=172)
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (109):
RSX: ! {RSXThread} *** prog id = 121
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_051.gtf", sb_addr=0xd015f418)
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_051.gtf" opened: fd = 173
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=173)
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (110):
RSX: ! {RSXThread} *** prog id = 122
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_022.gtf", sb_addr=0xd015f418)
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_022.gtf" opened: fd = 174
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=174)
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (111):
RSX: ! {RSXThread} *** prog id = 123
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (112):
RSX: ! {RSXThread} *** prog id = 124
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (113):
RSX: ! {RSXThread} *** prog id = 125
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_025.gtf", sb_addr=0xd015f438)
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_025.gtf" opened: fd = 175
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=175)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_026.gtf", sb_addr=0xd015f438)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_026.gtf" opened: fd = 176
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=176)
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_027.gtf", sb_addr=0xd015f468)
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_027.gtf" opened: fd = 177
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=177)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_003.gtf", sb_addr=0xd015f428)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/2d/t_005_002_000_000_003.gtf" opened: fd = 178
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=178)
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (114):
RSX: ! {RSXThread} *** prog id = 126
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (115):
RSX: ! {RSXThread} *** prog id = 127
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/ef/ef_050_skin.aem" opened: fd = 179
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=179, sb_addr=0xd015f3f8)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=179)
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (116):
RSX: ! {RSXThread} *** prog id = 128
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (117):
RSX: ! {RSXThread} *** prog id = 129
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (118):
RSX: ! {RSXThread} *** prog id = 130
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (119):
RSX: ! {RSXThread} *** prog id = 131
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (120):
RSX: ! {RSXThread} *** prog id = 132
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (121):
RSX: ! {RSXThread} *** prog id = 133
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (122):
RSX: ! {RSXThread} *** prog id = 134
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (123):
RSX: ! {RSXThread} *** prog id = 135
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (124):
RSX: ! {RSXThread} *** prog id = 136
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (125):
RSX: ! {RSXThread} *** prog id = 137
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (126):
RSX: ! {RSXThread} *** prog id = 138
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (127):
RSX: ! {RSXThread} *** prog id = 139
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (128):
RSX: ! {RSXThread} *** prog id = 140
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (129):
RSX: ! {RSXThread} *** prog id = 141
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (130):
RSX: ! {RSXThread} *** prog id = 142
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (131):
RSX: ! {RSXThread} *** prog id = 143
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (132):
RSX: ! {RSXThread} *** prog id = 144
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (133):
RSX: ! {RSXThread} *** prog id = 145
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (134):
RSX: ! {RSXThread} *** prog id = 146
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (135):
RSX: ! {RSXThread} *** prog id = 147
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (136):
RSX: ! {RSXThread} *** prog id = 148
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (137):
RSX: ! {RSXThread} *** prog id = 149
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (138):
RSX: ! {RSXThread} *** prog id = 150
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (139):
RSX: ! {RSXThread} *** prog id = 151
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (140):
RSX: ! {RSXThread} *** prog id = 152
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (141):
RSX: ! {RSXThread} *** prog id = 153
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (142):
RSX: ! {RSXThread} *** prog id = 154
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (143):
RSX: ! {RSXThread} *** prog id = 155
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (144):
RSX: ! {RSXThread} *** prog id = 156
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (145):
RSX: ! {RSXThread} *** prog id = 157
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (146):
RSX: ! {RSXThread} *** prog id = 158
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (147):
RSX: ! {RSXThread} *** prog id = 159
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (148):
RSX: ! {RSXThread} *** prog id = 160
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (149):
RSX: ! {RSXThread} *** prog id = 161
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (150):
RSX: ! {RSXThread} *** prog id = 162
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (151):
RSX: ! {RSXThread} *** prog id = 163
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (152):
RSX: ! {RSXThread} *** prog id = 164
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (153):
RSX: ! {RSXThread} *** prog id = 165
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (154):
RSX: ! {RSXThread} *** prog id = 166
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (155):
RSX: ! {RSXThread} *** prog id = 167
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (156):
RSX: ! {RSXThread} *** prog id = 168
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (157):
RSX: ! {RSXThread} *** prog id = 169
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (158):
RSX: ! {RSXThread} *** prog id = 170
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (159):
RSX: ! {RSXThread} *** prog id = 171
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (160):
RSX: ! {RSXThread} *** prog id = 172
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (161):
RSX: ! {RSXThread} *** prog id = 173
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (162):
RSX: ! {RSXThread} *** prog id = 174
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (163):
RSX: ! {RSXThread} *** prog id = 175
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (164):
RSX: ! {RSXThread} *** prog id = 176
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (165):
RSX: ! {RSXThread} *** prog id = 177
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (166):
RSX: ! {RSXThread} *** prog id = 178
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (167):
RSX: ! {RSXThread} *** prog id = 179
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (168):
RSX: ! {RSXThread} *** prog id = 180
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (169):
RSX: ! {RSXThread} *** prog id = 181
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (170):
RSX: ! {RSXThread} *** prog id = 182
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (171):
RSX: ! {RSXThread} *** prog id = 183
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (172):
RSX: ! {RSXThread} *** prog id = 184
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (173):
RSX: ! {RSXThread} *** prog id = 185
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (174):
RSX: ! {RSXThread} *** prog id = 186
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (175):
RSX: ! {RSXThread} *** prog id = 187
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (176):
RSX: ! {RSXThread} *** prog id = 188
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (177):
RSX: ! {RSXThread} *** prog id = 189
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (178):
RSX: ! {RSXThread} *** prog id = 190
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (179):
RSX: ! {RSXThread} *** prog id = 191
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (180):
RSX: ! {RSXThread} *** prog id = 192
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (181):
RSX: ! {RSXThread} *** prog id = 193
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (182):
RSX: ! {RSXThread} *** prog id = 194
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (183):
RSX: ! {RSXThread} *** prog id = 195
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (184):
RSX: ! {RSXThread} *** prog id = 196
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (185):
RSX: ! {RSXThread} *** prog id = 197
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (186):
RSX: ! {RSXThread} *** prog id = 198
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (187):
RSX: ! {RSXThread} *** prog id = 199
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (188):
RSX: ! {RSXThread} *** prog id = 200
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (189):
RSX: ! {RSXThread} *** prog id = 201
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (190):
RSX: ! {RSXThread} *** prog id = 202
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (191):
RSX: ! {RSXThread} *** prog id = 203
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (192):
RSX: ! {RSXThread} *** prog id = 204
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (193):
RSX: ! {RSXThread} *** prog id = 205
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/ef/t_010_050_001_001_002.gtf", sb_addr=0xd015f398)
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/ef/t_010_050_001_001_002.gtf" opened: fd = 180
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=180)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/ef/t_010_050_001_001_001.gtf", sb_addr=0xd015f398)
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/ef/t_010_050_001_001_001.gtf" opened: fd = 181
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=181)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/ef/t_010_050_001_001_004.gtf", sb_addr=0xd015f398)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/ef/t_010_050_001_001_004.gtf" opened: fd = 182
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=182)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/ef/t_010_050_001_001_005.gtf", sb_addr=0xd015f398)
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/ef/t_010_050_001_001_005.gtf" opened: fd = 183
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=183)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/ef/t_010_050_001_001_000.gtf", sb_addr=0xd015f398)
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/ef/t_010_050_001_001_000.gtf" opened: fd = 184
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=184)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/ef/t_010_050_001_001_003.gtf", sb_addr=0xd015f398)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/ef/t_010_050_001_001_003.gtf" opened: fd = 185
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=185)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/ef/t_010_050_001_001_006.gtf", sb_addr=0xd015f398)
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/ef/t_010_050_001_001_006.gtf" opened: fd = 186
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=186)
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (194):
RSX: ! {RSXThread} *** prog id = 206
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (195):
RSX: ! {RSXThread} *** prog id = 207
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (196):
RSX: ! {RSXThread} *** prog id = 208
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (197):
RSX: ! {RSXThread} *** prog id = 209
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (198):
RSX: ! {RSXThread} *** prog id = 210
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (199):
RSX: ! {RSXThread} *** prog id = 211
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (200):
RSX: ! {RSXThread} *** prog id = 212
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (201):
RSX: ! {RSXThread} *** prog id = 213
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/ef/ef_050_001.aea" opened: fd = 187
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=187, sb_addr=0xd015f738)
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=187)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (202):
RSX: ! {RSXThread} *** prog id = 214
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (203):
RSX: ! {RSXThread} *** prog id = 215
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/ef/ef_051_skin.aem" opened: fd = 188
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=188, sb_addr=0xd015f3f8)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=188)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (204):
RSX: ! {RSXThread} *** prog id = 216
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (205):
RSX: ! {RSXThread} *** prog id = 217
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (206):
RSX: ! {RSXThread} *** prog id = 218
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (207):
RSX: ! {RSXThread} *** prog id = 219
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (208):
RSX: ! {RSXThread} *** prog id = 220
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (209):
RSX: ! {RSXThread} *** prog id = 221
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (210):
RSX: ! {RSXThread} *** prog id = 222
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (211):
RSX: ! {RSXThread} *** prog id = 223
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (212):
RSX: ! {RSXThread} *** prog id = 224
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (213):
RSX: ! {RSXThread} *** prog id = 225
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (214):
RSX: ! {RSXThread} *** prog id = 226
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (215):
RSX: ! {RSXThread} *** prog id = 227
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (216):
RSX: ! {RSXThread} *** prog id = 228
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (217):
RSX: ! {RSXThread} *** prog id = 229
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (218):
RSX: ! {RSXThread} *** prog id = 230
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (219):
RSX: ! {RSXThread} *** prog id = 231
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (220):
RSX: ! {RSXThread} *** prog id = 232
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (221):
RSX: ! {RSXThread} *** prog id = 233
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (222):
RSX: ! {RSXThread} *** prog id = 234
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (223):
RSX: ! {RSXThread} *** prog id = 235
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (224):
RSX: ! {RSXThread} *** prog id = 236
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (225):
RSX: ! {RSXThread} *** prog id = 237
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (226):
RSX: ! {RSXThread} *** prog id = 238
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (227):
RSX: ! {RSXThread} *** prog id = 239
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (228):
RSX: ! {RSXThread} *** prog id = 240
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (229):
RSX: ! {RSXThread} *** prog id = 241
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (230):
RSX: ! {RSXThread} *** prog id = 242
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (231):
RSX: ! {RSXThread} *** prog id = 243
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (232):
RSX: ! {RSXThread} *** prog id = 244
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (233):
RSX: ! {RSXThread} *** prog id = 245
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (234):
RSX: ! {RSXThread} *** prog id = 246
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (235):
RSX: ! {RSXThread} *** prog id = 247
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (236):
RSX: ! {RSXThread} *** prog id = 248
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (237):
RSX: ! {RSXThread} *** prog id = 249
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (238):
RSX: ! {RSXThread} *** prog id = 250
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (239):
RSX: ! {RSXThread} *** prog id = 251
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (240):
RSX: ! {RSXThread} *** prog id = 252
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (241):
RSX: ! {RSXThread} *** prog id = 253
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (242):
RSX: ! {RSXThread} *** prog id = 254
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (243):
RSX: ! {RSXThread} *** prog id = 255
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (244):
RSX: ! {RSXThread} *** prog id = 256
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (245):
RSX: ! {RSXThread} *** prog id = 257
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (246):
RSX: ! {RSXThread} *** prog id = 258
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (247):
RSX: ! {RSXThread} *** prog id = 259
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (248):
RSX: ! {RSXThread} *** prog id = 260
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (249):
RSX: ! {RSXThread} *** prog id = 261
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (250):
RSX: ! {RSXThread} *** prog id = 262
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (251):
RSX: ! {RSXThread} *** prog id = 263
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (252):
RSX: ! {RSXThread} *** prog id = 264
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (253):
RSX: ! {RSXThread} *** prog id = 265
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (254):
RSX: ! {RSXThread} *** prog id = 266
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (255):
RSX: ! {RSXThread} *** prog id = 267
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (256):
RSX: ! {RSXThread} *** prog id = 268
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (257):
RSX: ! {RSXThread} *** prog id = 269
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (258):
RSX: ! {RSXThread} *** prog id = 270
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (259):
RSX: ! {RSXThread} *** prog id = 271
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (260):
RSX: ! {RSXThread} *** prog id = 272
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (261):
RSX: ! {RSXThread} *** prog id = 273
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (262):
RSX: ! {RSXThread} *** prog id = 274
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (263):
RSX: ! {RSXThread} *** prog id = 275
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (264):
RSX: ! {RSXThread} *** prog id = 276
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (265):
RSX: ! {RSXThread} *** prog id = 277
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (266):
RSX: ! {RSXThread} *** prog id = 278
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (267):
RSX: ! {RSXThread} *** prog id = 279
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (268):
RSX: ! {RSXThread} *** prog id = 280
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (269):
RSX: ! {RSXThread} *** prog id = 281
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (270):
RSX: ! {RSXThread} *** prog id = 282
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (271):
RSX: ! {RSXThread} *** prog id = 283
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (272):
RSX: ! {RSXThread} *** prog id = 284
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (273):
RSX: ! {RSXThread} *** prog id = 285
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (274):
RSX: ! {RSXThread} *** prog id = 286
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (275):
RSX: ! {RSXThread} *** prog id = 287
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (276):
RSX: ! {RSXThread} *** prog id = 288
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (277):
RSX: ! {RSXThread} *** prog id = 289
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (278):
RSX: ! {RSXThread} *** prog id = 290
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (279):
RSX: ! {RSXThread} *** prog id = 291
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (280):
RSX: ! {RSXThread} *** prog id = 292
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (281):
RSX: ! {RSXThread} *** prog id = 293
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (282):
RSX: ! {RSXThread} *** prog id = 294
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (283):
RSX: ! {RSXThread} *** prog id = 295
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (284):
RSX: ! {RSXThread} *** prog id = 296
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (285):
RSX: ! {RSXThread} *** prog id = 297
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (286):
RSX: ! {RSXThread} *** prog id = 298
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (287):
RSX: ! {RSXThread} *** prog id = 299
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (288):
RSX: ! {RSXThread} *** prog id = 300
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (289):
RSX: ! {RSXThread} *** prog id = 301
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (290):
RSX: ! {RSXThread} *** prog id = 302
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (291):
RSX: ! {RSXThread} *** prog id = 303
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (292):
RSX: ! {RSXThread} *** prog id = 304
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (293):
RSX: ! {RSXThread} *** prog id = 305
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (294):
RSX: ! {RSXThread} *** prog id = 306
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (295):
RSX: ! {RSXThread} *** prog id = 307
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (296):
RSX: ! {RSXThread} *** prog id = 308
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (297):
RSX: ! {RSXThread} *** prog id = 309
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (298):
RSX: ! {RSXThread} *** prog id = 310
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (299):
RSX: ! {RSXThread} *** prog id = 311
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (300):
RSX: ! {RSXThread} *** prog id = 312
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (301):
RSX: ! {RSXThread} *** prog id = 313
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (302):
RSX: ! {RSXThread} *** prog id = 314
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (303):
RSX: ! {RSXThread} *** prog id = 315
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (304):
RSX: ! {RSXThread} *** prog id = 316
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (305):
RSX: ! {RSXThread} *** prog id = 317
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (306):
RSX: ! {RSXThread} *** prog id = 318
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (307):
RSX: ! {RSXThread} *** prog id = 319
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (308):
RSX: ! {RSXThread} *** prog id = 320
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (309):
RSX: ! {RSXThread} *** prog id = 321
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (310):
RSX: ! {RSXThread} *** prog id = 322
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (311):
RSX: ! {RSXThread} *** prog id = 323
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (312):
RSX: ! {RSXThread} *** prog id = 324
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (313):
RSX: ! {RSXThread} *** prog id = 325
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (314):
RSX: ! {RSXThread} *** prog id = 326
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (315):
RSX: ! {RSXThread} *** prog id = 327
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (316):
RSX: ! {RSXThread} *** prog id = 328
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: ! {RSXThread} Add program (317):
RSX: ! {RSXThread} *** prog id = 329
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (318):
RSX: ! {RSXThread} *** prog id = 330
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (319):
RSX: ! {RSXThread} *** prog id = 331
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (320):
RSX: ! {RSXThread} *** prog id = 332
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (321):
RSX: ! {RSXThread} *** prog id = 333
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (322):
RSX: ! {RSXThread} *** prog id = 334
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (323):
RSX: ! {RSXThread} *** prog id = 335
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (324):
RSX: ! {RSXThread} *** prog id = 336
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (325):
RSX: ! {RSXThread} *** prog id = 337
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (326):
RSX: ! {RSXThread} *** prog id = 338
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (327):
RSX: ! {RSXThread} *** prog id = 339
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: ! {RSXThread} Add program (328):
RSX: ! {RSXThread} *** prog id = 340
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
PPU: ! {PPULLVMRecompiler} Removed 6 old versions
PPU: ! {PPULLVMRecompiler} Removed 28 old versions
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (329):
RSX: ! {RSXThread} *** prog id = 341
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (330):
RSX: ! {RSXThread} *** prog id = 342
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (331):
RSX: ! {RSXThread} *** prog id = 343
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (332):
RSX: ! {RSXThread} *** prog id = 344
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (333):
RSX: ! {RSXThread} *** prog id = 345
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (334):
RSX: ! {RSXThread} *** prog id = 346
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (335):
RSX: ! {RSXThread} *** prog id = 347
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (336):
RSX: ! {RSXThread} *** prog id = 348
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (337):
RSX: ! {RSXThread} *** prog id = 349
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (338):
RSX: ! {RSXThread} *** prog id = 350
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (339):
RSX: ! {RSXThread} *** prog id = 351
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (340):
RSX: ! {RSXThread} *** prog id = 352
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (341):
RSX: ! {RSXThread} *** prog id = 353
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (342):
RSX: ! {RSXThread} *** prog id = 354
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (343):
RSX: ! {RSXThread} *** prog id = 355
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (344):
RSX: ! {RSXThread} *** prog id = 356
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (345):
RSX: ! {RSXThread} *** prog id = 357
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (346):
RSX: ! {RSXThread} *** prog id = 358
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (347):
RSX: ! {RSXThread} *** prog id = 359
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (348):
RSX: ! {RSXThread} *** prog id = 360
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (349):
RSX: ! {RSXThread} *** prog id = 361
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (350):
RSX: ! {RSXThread} *** prog id = 362
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (351):
RSX: ! {RSXThread} *** prog id = 363
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (352):
RSX: ! {RSXThread} *** prog id = 364
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (353):
RSX: ! {RSXThread} *** prog id = 365
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (354):
RSX: ! {RSXThread} *** prog id = 366
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (355):
RSX: ! {RSXThread} *** prog id = 367
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (356):
RSX: ! {RSXThread} *** prog id = 368
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (357):
RSX: ! {RSXThread} *** prog id = 369
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (358):
RSX: ! {RSXThread} *** prog id = 370
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (359):
RSX: ! {RSXThread} *** prog id = 371
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (360):
RSX: ! {RSXThread} *** prog id = 372
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (361):
RSX: ! {RSXThread} *** prog id = 373
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (362):
RSX: ! {RSXThread} *** prog id = 374
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (363):
RSX: ! {RSXThread} *** prog id = 375
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (364):
RSX: ! {RSXThread} *** prog id = 376
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (365):
RSX: ! {RSXThread} *** prog id = 377
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (366):
RSX: ! {RSXThread} *** prog id = 378
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (367):
RSX: ! {RSXThread} *** prog id = 379
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (368):
RSX: ! {RSXThread} *** prog id = 380
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (369):
RSX: ! {RSXThread} *** prog id = 381
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: ! {RSXThread} Add program (370):
RSX: ! {RSXThread} *** prog id = 382
RSX: ! {RSXThread} *** vp id = 5
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (371):
RSX: ! {RSXThread} *** prog id = 383
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (372):
RSX: ! {RSXThread} *** prog id = 384
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (373):
RSX: ! {RSXThread} *** prog id = 385
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (374):
RSX: ! {RSXThread} *** prog id = 386
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (375):
RSX: ! {RSXThread} *** prog id = 387
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (376):
RSX: ! {RSXThread} *** prog id = 388
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (377):
RSX: ! {RSXThread} *** prog id = 389
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (378):
RSX: ! {RSXThread} *** prog id = 390
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (379):
RSX: ! {RSXThread} *** prog id = 391
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (380):
RSX: ! {RSXThread} *** prog id = 392
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (381):
RSX: ! {RSXThread} *** prog id = 393
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (382):
RSX: ! {RSXThread} *** prog id = 394
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (383):
RSX: ! {RSXThread} *** prog id = 395
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (384):
RSX: ! {RSXThread} *** prog id = 396
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (385):
RSX: ! {RSXThread} *** prog id = 397
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (386):
RSX: ! {RSXThread} *** prog id = 398
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (387):
RSX: ! {RSXThread} *** prog id = 399
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (388):
RSX: ! {RSXThread} *** prog id = 400
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (389):
RSX: ! {RSXThread} *** prog id = 401
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (390):
RSX: ! {RSXThread} *** prog id = 402
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (391):
RSX: ! {RSXThread} *** prog id = 403
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (392):
RSX: ! {RSXThread} *** prog id = 404
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (393):
RSX: ! {RSXThread} *** prog id = 405
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (394):
RSX: ! {RSXThread} *** prog id = 406
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (395):
RSX: ! {RSXThread} *** prog id = 407
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (396):
RSX: ! {RSXThread} *** prog id = 408
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (397):
RSX: ! {RSXThread} *** prog id = 409
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (398):
RSX: ! {RSXThread} *** prog id = 410
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (399):
RSX: ! {RSXThread} *** prog id = 411
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (400):
RSX: ! {RSXThread} *** prog id = 412
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (401):
RSX: ! {RSXThread} *** prog id = 413
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (402):
RSX: ! {RSXThread} *** prog id = 414
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (403):
RSX: ! {RSXThread} *** prog id = 415
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (404):
RSX: ! {RSXThread} *** prog id = 416
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (405):
RSX: ! {RSXThread} *** prog id = 417
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (406):
RSX: ! {RSXThread} *** prog id = 418
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (407):
RSX: ! {RSXThread} *** prog id = 419
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (408):
RSX: ! {RSXThread} *** prog id = 420
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (409):
RSX: ! {RSXThread} *** prog id = 421
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (410):
RSX: ! {RSXThread} *** prog id = 422
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (411):
RSX: ! {RSXThread} *** prog id = 423
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (412):
RSX: ! {RSXThread} *** prog id = 424
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (413):
RSX: ! {RSXThread} *** prog id = 425
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (414):
RSX: ! {RSXThread} *** prog id = 426
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (415):
RSX: ! {RSXThread} *** prog id = 427
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (416):
RSX: ! {RSXThread} *** prog id = 428
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (417):
RSX: ! {RSXThread} *** prog id = 429
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (418):
RSX: ! {RSXThread} *** prog id = 430
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (419):
RSX: ! {RSXThread} *** prog id = 431
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (420):
RSX: ! {RSXThread} *** prog id = 432
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/ef/t_010_051_001_001_002.gtf", sb_addr=0xd015f398)
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/ef/t_010_051_001_001_002.gtf" opened: fd = 189
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=189)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/ef/t_010_051_001_001_001.gtf", sb_addr=0xd015f398)
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/ef/t_010_051_001_001_001.gtf" opened: fd = 190
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=190)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/ef/t_010_051_001_001_004.gtf", sb_addr=0xd015f398)
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/ef/t_010_051_001_001_004.gtf" opened: fd = 191
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=191)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/ef/t_010_051_001_001_005.gtf", sb_addr=0xd015f398)
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/ef/t_010_051_001_001_005.gtf" opened: fd = 192
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=192)
RSX: ! {RSXThread} Add program (421):
RSX: ! {RSXThread} *** prog id = 433
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/ef/t_010_051_001_001_000.gtf", sb_addr=0xd015f398)
RSX: ! {RSXThread} Add program (422):
RSX: ! {RSXThread} *** prog id = 434
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/ef/t_010_051_001_001_000.gtf" opened: fd = 193
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=193)
RSX: ! {RSXThread} Add program (423):
RSX: ! {RSXThread} *** prog id = 435
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/ef/t_010_051_001_001_003.gtf", sb_addr=0xd015f398)
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/ef/t_010_051_001_001_003.gtf" opened: fd = 194
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=194)
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x001e801c]} cellSysmodule warning: cellSysmoduleIsLoaded(CELL_SYSMODULE_FS)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x00292040]} sys_fs warning: cellFsStat(path="/dev_bdvd/PS3_GAME/USRDIR/ef/t_010_051_001_001_006.gtf", sb_addr=0xd015f398)
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/ef/t_010_051_001_001_006.gtf" opened: fd = 195
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=195)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (424):
RSX: ! {RSXThread} *** prog id = 436
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (425):
RSX: ! {RSXThread} *** prog id = 437
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (426):
RSX: ! {RSXThread} *** prog id = 438
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (427):
RSX: ! {RSXThread} *** prog id = 439
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (428):
RSX: ! {RSXThread} *** prog id = 440
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (429):
RSX: ! {RSXThread} *** prog id = 441
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (430):
RSX: ! {RSXThread} *** prog id = 442
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: ! {RSXThread} Add program (431):
RSX: ! {RSXThread} *** prog id = 443
RSX: ! {RSXThread} *** vp id = 5
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (432):
RSX: ! {RSXThread} *** prog id = 444
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (433):
RSX: ! {RSXThread} *** prog id = 445
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (434):
RSX: ! {RSXThread} *** prog id = 446
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (435):
RSX: ! {RSXThread} *** prog id = 447
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (436):
RSX: ! {RSXThread} *** prog id = 448
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (437):
RSX: ! {RSXThread} *** prog id = 449
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (438):
RSX: ! {RSXThread} *** prog id = 450
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (439):
RSX: ! {RSXThread} *** prog id = 451
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (440):
RSX: ! {RSXThread} *** prog id = 452
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: ! {RSXThread} Add program (441):
RSX: ! {RSXThread} *** prog id = 453
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (442):
RSX: ! {RSXThread} *** prog id = 454
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (443):
RSX: ! {RSXThread} *** prog id = 455
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (444):
RSX: ! {RSXThread} *** prog id = 456
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (445):
RSX: ! {RSXThread} *** prog id = 457
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (446):
RSX: ! {RSXThread} *** prog id = 458
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (447):
RSX: ! {RSXThread} *** prog id = 459
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (448):
RSX: ! {RSXThread} *** prog id = 460
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (449):
RSX: ! {RSXThread} *** prog id = 461
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (450):
RSX: ! {RSXThread} *** prog id = 462
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (451):
RSX: ! {RSXThread} *** prog id = 463
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (452):
RSX: ! {RSXThread} *** prog id = 464
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (453):
RSX: ! {RSXThread} *** prog id = 465
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (454):
RSX: ! {RSXThread} *** prog id = 466
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (455):
RSX: ! {RSXThread} *** prog id = 467
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (456):
RSX: ! {RSXThread} *** prog id = 468
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (457):
RSX: ! {RSXThread} *** prog id = 469
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (458):
RSX: ! {RSXThread} *** prog id = 470
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (459):
RSX: ! {RSXThread} *** prog id = 471
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (460):
RSX: ! {RSXThread} *** prog id = 472
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (461):
RSX: ! {RSXThread} *** prog id = 473
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (462):
RSX: ! {RSXThread} *** prog id = 474
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (463):
RSX: ! {RSXThread} *** prog id = 475
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (464):
RSX: ! {RSXThread} *** prog id = 476
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (465):
RSX: ! {RSXThread} *** prog id = 477
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (466):
RSX: ! {RSXThread} *** prog id = 478
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (467):
RSX: ! {RSXThread} *** prog id = 479
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (468):
RSX: ! {RSXThread} *** prog id = 480
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (469):
RSX: ! {RSXThread} *** prog id = 481
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (470):
RSX: ! {RSXThread} *** prog id = 482
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/ef/ef_051_001.aea" opened: fd = 196
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=196, sb_addr=0xd015f738)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=196)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (471):
RSX: ! {RSXThread} *** prog id = 483
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (472):
RSX: ! {RSXThread} *** prog id = 484
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (473):
RSX: ! {RSXThread} *** prog id = 485
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (474):
RSX: ! {RSXThread} *** prog id = 486
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (475):
RSX: ! {RSXThread} *** prog id = 487
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: ! {PPU[124] Thread (DA_NEXT::Make2)[0x00292034]} sys_fs : "/dev_bdvd/PS3_GAME/USRDIR/ef/ef_060_skin.aem" opened: fd = 197
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x002920a0]} sys_fs warning: cellFsFstat(fd=197, sb_addr=0xd015f3f8)
HLE: W {PPU[124] Thread (DA_NEXT::Make2)[0x0029201c]} sys_fs warning: cellFsClose(fd=197)
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (476):
RSX: ! {RSXThread} *** prog id = 488
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (477):
RSX: ! {RSXThread} *** prog id = 489
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (478):
RSX: ! {RSXThread} *** prog id = 490
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (479):
RSX: ! {RSXThread} *** prog id = 491
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (480):
RSX: ! {RSXThread} *** prog id = 492
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (481):
RSX: ! {RSXThread} *** prog id = 493
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (482):
RSX: ! {RSXThread} *** prog id = 494
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (483):
RSX: ! {RSXThread} *** prog id = 495
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (484):
RSX: ! {RSXThread} *** prog id = 496
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (485):
RSX: ! {RSXThread} *** prog id = 497
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (486):
RSX: ! {RSXThread} *** prog id = 498
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (487):
RSX: ! {RSXThread} *** prog id = 499
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (488):
RSX: ! {RSXThread} *** prog id = 500
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (489):
RSX: ! {RSXThread} *** prog id = 501
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (490):
RSX: ! {RSXThread} *** prog id = 502
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (491):
RSX: ! {RSXThread} *** prog id = 503
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (492):
RSX: ! {RSXThread} *** prog id = 504
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (493):
RSX: ! {RSXThread} *** prog id = 505
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (494):
RSX: ! {RSXThread} *** prog id = 506
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (495):
RSX: ! {RSXThread} *** prog id = 507
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (496):
RSX: ! {RSXThread} *** prog id = 508
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (497):
RSX: ! {RSXThread} *** prog id = 509
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (498):
RSX: ! {RSXThread} *** prog id = 510
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (499):
RSX: ! {RSXThread} *** prog id = 511
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (500):
RSX: ! {RSXThread} *** prog id = 512
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (501):
RSX: ! {RSXThread} *** prog id = 513
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (502):
RSX: ! {RSXThread} *** prog id = 514
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (503):
RSX: ! {RSXThread} *** prog id = 515
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (504):
RSX: ! {RSXThread} *** prog id = 516
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (505):
RSX: ! {RSXThread} *** prog id = 517
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (506):
RSX: ! {RSXThread} *** prog id = 518
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (507):
RSX: ! {RSXThread} *** prog id = 519
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (508):
RSX: ! {RSXThread} *** prog id = 520
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (509):
RSX: ! {RSXThread} *** prog id = 521
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (510):
RSX: ! {RSXThread} *** prog id = 522
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (511):
RSX: ! {RSXThread} *** prog id = 523
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (512):
RSX: ! {RSXThread} *** prog id = 524
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (513):
RSX: ! {RSXThread} *** prog id = 525
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (514):
RSX: ! {RSXThread} *** prog id = 526
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (515):
RSX: ! {RSXThread} *** prog id = 527
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (516):
RSX: ! {RSXThread} *** prog id = 528
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (517):
RSX: ! {RSXThread} *** prog id = 529
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (518):
RSX: ! {RSXThread} *** prog id = 530
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (519):
RSX: ! {RSXThread} *** prog id = 531
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (520):
RSX: ! {RSXThread} *** prog id = 532
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (521):
RSX: ! {RSXThread} *** prog id = 533
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (522):
RSX: ! {RSXThread} *** prog id = 534
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (523):
RSX: ! {RSXThread} *** prog id = 535
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (524):
RSX: ! {RSXThread} *** prog id = 536
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (525):
RSX: ! {RSXThread} *** prog id = 537
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (526):
RSX: ! {RSXThread} *** prog id = 538
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (527):
RSX: ! {RSXThread} *** prog id = 539
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (528):
RSX: ! {RSXThread} *** prog id = 540
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (529):
RSX: ! {RSXThread} *** prog id = 541
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (530):
RSX: ! {RSXThread} *** prog id = 542
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (531):
RSX: ! {RSXThread} *** prog id = 543
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (532):
RSX: ! {RSXThread} *** prog id = 544
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (533):
RSX: ! {RSXThread} *** prog id = 545
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (534):
RSX: ! {RSXThread} *** prog id = 546
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (535):
RSX: ! {RSXThread} *** prog id = 547
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (536):
RSX: ! {RSXThread} *** prog id = 548
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (537):
RSX: ! {RSXThread} *** prog id = 549
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (538):
RSX: ! {RSXThread} *** prog id = 550
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (539):
RSX: ! {RSXThread} *** prog id = 551
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (540):
RSX: ! {RSXThread} *** prog id = 552
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (541):
RSX: ! {RSXThread} *** prog id = 553
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (542):
RSX: ! {RSXThread} *** prog id = 554
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (543):
RSX: ! {RSXThread} *** prog id = 555
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (544):
RSX: ! {RSXThread} *** prog id = 556
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (545):
RSX: ! {RSXThread} *** prog id = 557
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (546):
RSX: ! {RSXThread} *** prog id = 558
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (547):
RSX: ! {RSXThread} *** prog id = 559
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (548):
RSX: ! {RSXThread} *** prog id = 560
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (549):
RSX: ! {RSXThread} *** prog id = 561
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (550):
RSX: ! {RSXThread} *** prog id = 562
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (551):
RSX: ! {RSXThread} *** prog id = 563
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (552):
RSX: ! {RSXThread} *** prog id = 564
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (553):
RSX: ! {RSXThread} *** prog id = 565
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (554):
RSX: ! {RSXThread} *** prog id = 566
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (555):
RSX: ! {RSXThread} *** prog id = 567
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (556):
RSX: ! {RSXThread} *** prog id = 568
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (557):
RSX: ! {RSXThread} *** prog id = 569
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (558):
RSX: ! {RSXThread} *** prog id = 570
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (559):
RSX: ! {RSXThread} *** prog id = 571
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (560):
RSX: ! {RSXThread} *** prog id = 572
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (561):
RSX: ! {RSXThread} *** prog id = 573
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (562):
RSX: ! {RSXThread} *** prog id = 574
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (563):
RSX: ! {RSXThread} *** prog id = 575
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (564):
RSX: ! {RSXThread} *** prog id = 576
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (565):
RSX: ! {RSXThread} *** prog id = 577
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (566):
RSX: ! {RSXThread} *** prog id = 578
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (567):
RSX: ! {RSXThread} *** prog id = 579
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (568):
RSX: ! {RSXThread} *** prog id = 580
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (569):
RSX: ! {RSXThread} *** prog id = 581
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (570):
RSX: ! {RSXThread} *** prog id = 582
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (571):
RSX: ! {RSXThread} *** prog id = 583
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (572):
RSX: ! {RSXThread} *** prog id = 584
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (573):
RSX: ! {RSXThread} *** prog id = 585
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (574):
RSX: ! {RSXThread} *** prog id = 586
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (575):
RSX: ! {RSXThread} *** prog id = 587
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (576):
RSX: ! {RSXThread} *** prog id = 588
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (577):
RSX: ! {RSXThread} *** prog id = 589
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (578):
RSX: ! {RSXThread} *** prog id = 590
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (579):
RSX: ! {RSXThread} *** prog id = 591
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (580):
RSX: ! {RSXThread} *** prog id = 592
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (581):
RSX: ! {RSXThread} *** prog id = 593
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (582):
RSX: ! {RSXThread} *** prog id = 594
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (583):
RSX: ! {RSXThread} *** prog id = 595
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (584):
RSX: ! {RSXThread} *** prog id = 596
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (585):
RSX: ! {RSXThread} *** prog id = 597
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (586):
RSX: ! {RSXThread} *** prog id = 598
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (587):
RSX: ! {RSXThread} *** prog id = 599
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (588):
RSX: ! {RSXThread} *** prog id = 600
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (589):
RSX: ! {RSXThread} *** prog id = 601
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (590):
RSX: ! {RSXThread} *** prog id = 602
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (591):
RSX: ! {RSXThread} *** prog id = 603
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (592):
RSX: ! {RSXThread} *** prog id = 604
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (593):
RSX: ! {RSXThread} *** prog id = 605
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (594):
RSX: ! {RSXThread} *** prog id = 606
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (595):
RSX: ! {RSXThread} *** prog id = 607
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (596):
RSX: ! {RSXThread} *** prog id = 608
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (597):
RSX: ! {RSXThread} *** prog id = 609
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (598):
RSX: ! {RSXThread} *** prog id = 610
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (599):
RSX: ! {RSXThread} *** prog id = 611
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (600):
RSX: ! {RSXThread} *** prog id = 612
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (601):
RSX: ! {RSXThread} *** prog id = 613
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (602):
RSX: ! {RSXThread} *** prog id = 614
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (603):
RSX: ! {RSXThread} *** prog id = 615
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (604):
RSX: ! {RSXThread} *** prog id = 616
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (605):
RSX: ! {RSXThread} *** prog id = 617
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (606):
RSX: ! {RSXThread} *** prog id = 618
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (607):
RSX: ! {RSXThread} *** prog id = 619
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (608):
RSX: ! {RSXThread} *** prog id = 620
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (609):
RSX: ! {RSXThread} *** prog id = 621
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (610):
RSX: ! {RSXThread} *** prog id = 622
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (611):
RSX: ! {RSXThread} *** prog id = 623
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (612):
RSX: ! {RSXThread} *** prog id = 624
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (613):
RSX: ! {RSXThread} *** prog id = 625
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (614):
RSX: ! {RSXThread} *** prog id = 626
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (615):
RSX: ! {RSXThread} *** prog id = 627
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (616):
RSX: ! {RSXThread} *** prog id = 628
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (617):
RSX: ! {RSXThread} *** prog id = 629
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (618):
RSX: ! {RSXThread} *** prog id = 630
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (619):
RSX: ! {RSXThread} *** prog id = 631
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (620):
RSX: ! {RSXThread} *** prog id = 632
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (621):
RSX: ! {RSXThread} *** prog id = 633
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (622):
RSX: ! {RSXThread} *** prog id = 634
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (623):
RSX: ! {RSXThread} *** prog id = 635
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (624):
RSX: ! {RSXThread} *** prog id = 636
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (625):
RSX: ! {RSXThread} *** prog id = 637
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (626):
RSX: ! {RSXThread} *** prog id = 638
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (627):
RSX: ! {RSXThread} *** prog id = 639
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (628):
RSX: ! {RSXThread} *** prog id = 640
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (629):
RSX: ! {RSXThread} *** prog id = 641
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (630):
RSX: ! {RSXThread} *** prog id = 642
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (631):
RSX: ! {RSXThread} *** prog id = 643
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (632):
RSX: ! {RSXThread} *** prog id = 644
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (633):
RSX: ! {RSXThread} *** prog id = 645
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (634):
RSX: ! {RSXThread} *** prog id = 646
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (635):
RSX: ! {RSXThread} *** prog id = 647
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (636):
RSX: ! {RSXThread} *** prog id = 648
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (637):
RSX: ! {RSXThread} *** prog id = 649
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (638):
RSX: ! {RSXThread} *** prog id = 650
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (639):
RSX: ! {RSXThread} *** prog id = 651
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (640):
RSX: ! {RSXThread} *** prog id = 652
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (641):
RSX: ! {RSXThread} *** prog id = 653
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (642):
RSX: ! {RSXThread} *** prog id = 654
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (643):
RSX: ! {RSXThread} *** prog id = 655
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (644):
RSX: ! {RSXThread} *** prog id = 656
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (645):
RSX: ! {RSXThread} *** prog id = 657
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (646):
RSX: ! {RSXThread} *** prog id = 658
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (647):
RSX: ! {RSXThread} *** prog id = 659
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (648):
RSX: ! {RSXThread} *** prog id = 660
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (649):
RSX: ! {RSXThread} *** prog id = 661
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (650):
RSX: ! {RSXThread} *** prog id = 662
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (651):
RSX: ! {RSXThread} *** prog id = 663
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (652):
RSX: ! {RSXThread} *** prog id = 664
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (653):
RSX: ! {RSXThread} *** prog id = 665
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (654):
RSX: ! {RSXThread} *** prog id = 666
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (655):
RSX: ! {RSXThread} *** prog id = 667
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (656):
RSX: ! {RSXThread} *** prog id = 668
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (657):
RSX: ! {RSXThread} *** prog id = 669
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (658):
RSX: ! {RSXThread} *** prog id = 670
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (659):
RSX: ! {RSXThread} *** prog id = 671
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (660):
RSX: ! {RSXThread} *** prog id = 672
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (661):
RSX: ! {RSXThread} *** prog id = 673
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (662):
RSX: ! {RSXThread} *** prog id = 674
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (663):
RSX: ! {RSXThread} *** prog id = 675
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (664):
RSX: ! {RSXThread} *** prog id = 676
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (665):
RSX: ! {RSXThread} *** prog id = 677
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (666):
RSX: ! {RSXThread} *** prog id = 678
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (667):
RSX: ! {RSXThread} *** prog id = 679
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (668):
RSX: ! {RSXThread} *** prog id = 680
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (669):
RSX: ! {RSXThread} *** prog id = 681
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (670):
RSX: ! {RSXThread} *** prog id = 682
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (671):
RSX: ! {RSXThread} *** prog id = 683
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (672):
RSX: ! {RSXThread} *** prog id = 684
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (673):
RSX: ! {RSXThread} *** prog id = 685
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (674):
RSX: ! {RSXThread} *** prog id = 686
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (675):
RSX: ! {RSXThread} *** prog id = 687
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (676):
RSX: ! {RSXThread} *** prog id = 688
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (677):
RSX: ! {RSXThread} *** prog id = 689
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (678):
RSX: ! {RSXThread} *** prog id = 690
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (679):
RSX: ! {RSXThread} *** prog id = 691
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (680):
RSX: ! {RSXThread} *** prog id = 692
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (681):
RSX: ! {RSXThread} *** prog id = 693
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (682):
RSX: ! {RSXThread} *** prog id = 694
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (683):
RSX: ! {RSXThread} *** prog id = 695
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (684):
RSX: ! {RSXThread} *** prog id = 696
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (685):
RSX: ! {RSXThread} *** prog id = 697
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
RSX: ! {RSXThread} Add program (686):
RSX: ! {RSXThread} *** prog id = 698
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (687):
RSX: ! {RSXThread} *** prog id = 699
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (688):
RSX: ! {RSXThread} *** prog id = 700
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (689):
RSX: ! {RSXThread} *** prog id = 701
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (690):
RSX: ! {RSXThread} *** prog id = 702
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: ! {RSXThread} Add program (691):
RSX: ! {RSXThread} *** prog id = 703
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (692):
RSX: ! {RSXThread} *** prog id = 704
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (693):
RSX: ! {RSXThread} *** prog id = 705
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x109
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4025
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
HLE: W {PPU[1] Thread (CPUThread)[0x001ea034]} cellSysutil warning: cellSysutilGetSystemParamInt: CELL_SYSUTIL_SYSTEMPARAM_ID_ENTER_BUTTON_ASSIGN
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3c020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (694):
RSX: ! {RSXThread} *** prog id = 706
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (695):
RSX: ! {RSXThread} *** prog id = 707
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 12
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc0;
uniform vec4 fc48 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;

void main()
{
	r0.xyz = texture(tex0, tc0.xy).xyz;
	h0.xyz = r0.xyz;
	h0.w = fc48.xxxx.w;
	ocol0 = h0;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x0029813c]} cellSpurs TODO: _cellSpursSendSignal
HLE: E {PPU[122] Thread (MultiStream PU Thread)[0x002980e8]} cellSpurs TODO: cellSpursEventFlagWait
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (696):
RSX: ! {RSXThread} *** prog id = 708
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x3fc020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (697):
RSX: ! {RSXThread} *** prog id = 709
RSX: ! {RSXThread} *** vp id = 10
RSX: ! {RSXThread} *** fp id = 7
RSX: ! {RSXThread} *** vp data size = 768
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
vec4 tmp0;
vec4 dst_reg7 = vec4(0.0);
vec4 tmp1;
vec4 tmp2;
vec4 tmp3;
vec4 dst_reg8 = vec4(0.0);
vec4 dst_reg9 = vec4(0.0);
vec4 dst_reg10 = vec4(0.0);
vec4 dst_reg11 = vec4(0.0);
vec4 dst_reg12 = vec4(0.0);
vec4 dst_reg13 = vec4(0.0);
vec4 dst_reg14 = vec4(0.0);
layout (location = 0) in vec4 in_pos;
layout (location = 8) in vec4 in_tc0;
uniform vec4 vc[468];
out vec4 tc0;
out vec4 tc1;
out vec4 tc2;
out vec4 tc3;
out vec4 tc4;
out vec4 tc5;
out vec4 tc6;
out vec4 tc7;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	tc1 = dst_reg8;
	tc2 = dst_reg9;
	tc3 = dst_reg10;
	tc4 = dst_reg11;
	tc5 = dst_reg12;
	tc6 = dst_reg13;
	tc7 = dst_reg14;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	tmp0.y = vec4((1.0 / vc[467].xxxx).y).y;
	dst_reg7.xy = in_tc0.xyxx.xy;
	tmp0.w = vc[465].xxxx.w;
	tmp0.x = vc[463].xxxx.x;
	tmp1.x = vc[461].xxxx.x;
	tmp1.y = vc[459].xxxx.y;
	tmp1.z = vc[457].xxxx.z;
	tmp1.w = vc[455].xxxx.w;
	tmp0.z = vc[453].xxxx.z;
	tmp0.z = (vc[454].xxxx + tmp0.zzzz).z;
	tmp2.y = (vc[456].xxxx + tmp1.wwww).y;
	tmp2.x = (vc[458].xxxx + tmp1.zzzz).x;
	tmp1.y = (vc[460].xxxx + tmp1.yyyy).y;
	tmp2.w = (vc[462].xxxx + tmp1.xxxx).w;
	tmp0.x = (vc[464].xxxx + tmp0.xxxx).x;
	tmp1.x = (vc[466].xxxx + tmp0.wwww).x;
	tmp0.w = vec4((1.0 / tmp0.xxxx).w).w;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
	tmp2.z = (1.0 / tmp1.xxxx).z;
	tmp0.x = vc[452].yyyy.x;
	tmp3.x = (1.0 / tmp2.wwww).x;
	tmp1.x = (tmp0.wwww * vc[463].xxxx).x;
	tmp1.z = (1.0 / tmp1.yyyy).z;
	tmp0.w = (tmp2.zzzz * vc[465].xxxx).w;
	tmp2.x = (1.0 / tmp2.xxxx).x;
	tmp1.y = (tmp3.xxxx * vc[461].xxxx).y;
	tmp2.y = (1.0 / tmp2.yyyy).y;
	tmp1.z = (tmp1.zzzz * vc[459].xxxx).z;
	tmp0.z = (1.0 / tmp0.zzzz).z;
	tmp1.w = (tmp2.xxxx * vc[457].xxxx).w;
	tmp2.x = (tmp2.yyyy * vc[455].xxxx).x;
	tmp0.z = (tmp0.zzzz * vc[453].xxxx).z;
	tmp0.z = (vc[451].wwww + tmp0.zzzz).z;
	tmp2.x = (vc[451].zzzz + tmp2.xxxx).x;
	tmp1.w = (vc[451].yyyy + tmp1.wwww).w;
	tmp1.z = (vc[451].xxxx + tmp1.zzzz).z;
	tmp1.y = (vc[452].wwww + tmp1.yyyy).y;
	tmp0.w = (vc[452].xxxx + tmp0.wwww).w;
	tmp1.x = (vc[452].zzzz + tmp1.xxxx).x;
	dst_reg8.zw = (-tmp0.wwww * tmp0.xxxy + in_tc0.xxxy).zw;
	dst_reg8.xy = (tmp0.wwww * tmp0.xyxx + in_tc0.xyxx).xy;
	dst_reg9.zw = (tmp0.xxxy * -tmp1.xxxx + in_tc0.xxxy).zw;
	dst_reg9.xy = (tmp0.xyxx * tmp1.xxxx + in_tc0.xyxx).xy;
	dst_reg10.zw = (tmp0.xxxy * -tmp1.yyyy + in_tc0.xxxy).zw;
	dst_reg10.xy = (tmp0.xyxx * tmp1.yyyy + in_tc0.xyxx).xy;
	dst_reg11.zw = (tmp0.xxxy * -tmp1.zzzz + in_tc0.xxxy).zw;
	dst_reg11.xy = (tmp0.xyxx * tmp1.zzzz + in_tc0.xyxx).xy;
	dst_reg12.zw = (tmp0.xxxy * -tmp1.wwww + in_tc0.xxxy).zw;
	dst_reg12.xy = (tmp0.xyxx * tmp1.wwww + in_tc0.xyxx).xy;
	dst_reg13.zw = (tmp0.xxxy * -tmp2.xxxx + in_tc0.xxxy).zw;
	dst_reg13.xy = (tmp0.xyxx * tmp2.xxxx + in_tc0.xyxx).xy;
	dst_reg14.zw = (tmp0.xxxy * -tmp0.zzzz + in_tc0.xxxy).zw;
	dst_reg14.xy = (tmp0.xyxx * tmp0.zzzz + in_tc0.xyxx).xy;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h6 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 h0 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex0;
in vec4 tc1;
in vec4 tc0;
in vec4 tc2;
in vec4 tc3;
in vec4 tc4;
in vec4 tc5;
in vec4 tc6;
in vec4 tc7;
uniform vec4 fc32 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc64 = vec4(0.500000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc176 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc256 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc416 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc496 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc576 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc656 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;
layout (location = 3) out vec4 ocol3;

void main()
{
	r0 = texture(tex0, tc1.xy);
	h2.x = fc32.xxxx.x;
	h6.x = (h2 * fc64.xxxx).x;
	r1 = texture(tex0, tc1.zwzz.xy);
	r2 = (r0 + r1);
	r0 = texture(tex0, tc0.xy);
	r1 = (h6.xxxx * r0);
	r0 = texture(tex0, tc2.xy);
	r2 = (r2 * fc176.xxxx + r1);
	r1 = texture(tex0, tc2.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc3.xy);
	r2 = (r1 * fc256.xxxx + r2);
	r1 = texture(tex0, tc3.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc4.xy);
	r2 = (r1 * fc336.xxxx + r2);
	r1 = texture(tex0, tc4.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc5.xy);
	r2 = (r1 * fc416.xxxx + r2);
	r1 = texture(tex0, tc5.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc6.xy);
	r2 = (r1 * fc496.xxxx + r2);
	r1 = texture(tex0, tc6.zwzz.xy);
	r1 = (r0 + r1);
	r0 = texture(tex0, tc7.xy);
	r2 = (r1 * fc576.xxxx + r2);
	r1 = texture(tex0, tc7.zwzz.xy);
	r0 = (r0 + r1);
	h0 = (r0 * fc656.xxxx + r2);
	ocol0 = h0;
	ocol1 = h2;
	ocol3 = h6;
}

RSX: W {RSXThread} TODO: NV4097_SET_WINDOW_OFFSET: x=0, y=0
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_INPUT_MASK: 0x101
RSX: W {RSXThread} NV4097_SET_VERTEX_ATTRIB_OUTPUT_MASK: 0x4020
RSX: W {RSXThread} NV4097_SET_TEX_COORD_CONTROL
RSX: ! {RSXThread} Add program (698):
RSX: ! {RSXThread} *** prog id = 710
RSX: ! {RSXThread} *** vp id = 5
RSX: ! {RSXThread} *** fp id = 16
RSX: ! {RSXThread} *** vp data size = 80
RSX: ! {RSXThread} *** fp data size = 32
RSX: ! {RSXThread} *** vp shader = 
#version 330

uniform mat4 scaleOffsetMat = mat4(1.0);
vec4 dst_reg7 = vec4(0.0);
vec4 dst_reg0 = vec4(0.0f, 0.0f, 0.0f, 1.0f);
layout (location = 8) in vec4 in_tc0;
layout (location = 0) in vec4 in_pos;
uniform vec4 vc[468];
out vec4 tc0;

void func0();

void main()
{
	func0();
	gl_Position = dst_reg0;
	tc0 = dst_reg7;
	gl_Position = gl_Position * scaleOffsetMat;
}

void func0()
{
	dst_reg7.xy = in_tc0.xyxx.xy;
	dst_reg0.w = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[259])).w;
	dst_reg0.z = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[258])).z;
	dst_reg0.y = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[257])).y;
	dst_reg0.x = vec4(dot(vec4(in_pos.xyzx.xyz, 1.0), vc[256])).x;
}

RSX: ! {RSXThread} *** fp shader = 
#version 330

vec4 r1 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r0 = vec4(0.0, 0.0, 0.0, 0.0);
vec4 r2 = vec4(0.0, 0.0, 0.0, 0.0);
uniform sampler2D tex1;
uniform sampler2D tex0;
uniform sampler2D tex2;
in vec4 tc0;
uniform vec4 fc32 = vec4(1.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc80 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc128 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc160 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc192 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc240 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc288 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
uniform vec4 fc336 = vec4(0.000000, 0.000000, 0.000000, 0.000000);
layout (location = 0) out vec4 ocol0;
layout (location = 1) out vec4 ocol1;

void main()
{
	r1.xyz = texture(tex1, tc0.xy).xyz;
	r0.w = fc32.xxxx.w;
	r2.xyz = texture(tex0, tc0.xy).xyz;
	r1.xyz = (r1 * fc80.xxxx + r2).xyz;
	r0.xyz = texture(tex2, tc0.xy).xyz;
	r0.z = (r0 * fc128.xxxx + r1).z;
	r0.y = (r0 * fc160.xxxx + r1).y;
	r0.x = (r0 * fc192.xxxx + r1).x;
	r0.z = log2(r0.zzzz).z;
	r1.x = (r0.zzzz / fc240.xxxx).x;
	r0.y = log2(r0.yyyy).y;
	r0.y = (r0 / fc288.xxxx).y;
	r0.x = log2(r0).x;
	r0.x = (r0 / fc336.xxxx).x;
	r0.x = exp2(r0).x;
	r0.y = exp2(r0.yyyy).y;
	r0.z = exp2(r1).z;
	ocol0 = r0;
	ocol1 = r2;
}

RSX: W {RSXThread} RSX thread aborted
HLE: W {PPU[59] Thread (_sys_mixerSurBusReq)[0x0015afc0]} sys_cond warning: sys_cond_wait(id=54) aborted
RSX: W {VBlank thread} VBlank thread aborted
HLE: W {PPU[119] Thread (spu_printf_handler)[0x00165450]} sys_event warning: sys_event_queue_receive(equeue=118) aborted
HLE: W {PPU[115] Thread (SPURS_FOR_DSPSpursHdlr0)[0x00000000]} sys_lwcond warning: sys_lwcond_wait(id=112) aborted
HLE: W {PPU[41] Thread (GRP_SPUJOBSpursHdlr0)[0x00000000]} sys_lwcond warning: sys_lwcond_wait(id=38) aborted
HLE: W {PPU[62] Thread (_cellsurMixerMain)[0x0015e288]} sys_event warning: sys_event_queue_receive(equeue=64) aborted
HLE: W {PPU[51] Thread (_sys_MixerChStripMain)[0x0016281c]} sys_cond warning: sys_cond_wait(id=50) aborted
HLE: W {PPU[89] Thread (SOUND_CONVSpursHdlr0)[0x00000000]} sys_lwcond warning: sys_lwcond_wait(id=86) aborted
HLE: W {Audio Thread} cellAudio warning: Audio thread aborted
HLE: W {PPU[115] Thread (SPURS_FOR_DSPSpursHdlr0)[0x00000000]} sys_lwcond warning: sys_lwcond_wait(id=112) failed (EPERM)
HLE: W {PPU[41] Thread (GRP_SPUJOBSpursHdlr0)[0x00000000]} sys_lwcond warning: sys_lwcond_wait(id=38) failed (EPERM)
HLE: W {PPU[89] Thread (SOUND_CONVSpursHdlr0)[0x00000000]} sys_lwcond warning: sys_lwcond_wait(id=86) failed (EPERM)
PPU: ! {PPULLVMRecompiler} Removed 18 old versions
